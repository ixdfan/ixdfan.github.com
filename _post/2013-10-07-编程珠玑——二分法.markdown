---
layout: post
title: 编程珠玑——二分法
categories:
- 编程珠玑
tags:
- 编程珠玑
---

==========================================================================

A、给定一个最多包含40亿个随机排列的32为整数的顺序文件，找出一个不存在文件中的32位整数（在文件中至少缺失一个这样的数——为什么？）。在具有足够内存的情况下，如何解决该问题？如何有几个外部的“临时”文件可用，但是仅有几百字节的内存，又该如何解决问题？

==========================================================================

首先为什么文件中至少缺失一个这样的数？

由于32位数最大为2^32-1大约为42亿，所以至少是缺少1个数的！

作者在这里的意思应该是说文件中中一定有缺少的数字，姑且当做一个来算！

==========================================================================

对于这个问题，我首先想到的还是开篇中的位图做法，直接用2^32-1个位来存储这40亿个数，然后依次监测哪个位置为0，就直接输出即可！因为只要求找出任意一个，所以输出一个就可以了！

但是对于内存仅仅几百字节的时候这个我就没有想出来！书上说用的二分法，看了半天也没有看懂！

多方的查找终于明白了作者的意思！

首先是二分查找的使用！

这里的数字使用的是二进制的形式，对于32位的无符号整形来说

最高位为1与最高位为0的数字的个数是一样的！

这个有点不好理解，可以这样理解！

假如有31位，那么31位每一位都有0、1两种状态，那么所有的状态有2^31中，

第32位上是0还是1对后面31位的0、1顺序是没有影响的！

所以我们可以根据最高位是1还是0来分为两组，将从文件中高位为1的数字读取到临时文件1中，在将文件中高位为0的数字读取到临时文件0中

比较文件0与文件1中数字的个数，数字个数少的一方就是明显缺少的哪一方，当然多的那一方也可能有缺少的部分，如果相等则随便取一组就可以了！

然后用类似的方法比较数字少的文件中的数字的第31位，仍然采用上面的方法！

当比较到某位时，文件中的数字仅仅剩下了1个的时候，那么缺少的就是这位对应的位！

至于为什么要**将读取的数字放到临时文件中，是为了方便下一次的读取，下一次读取就不必遍历所有的数字了**！只在临时文件中读取比较就可以了！反正有很多临时文件可用，不用白不用！

==========================================================================

比如有一组3位(0-7)的数字，至少缺1个数字

1,3,5,6,7

将其改为二进制
    1:001
    3:011
    5:101
    6:110
    7:111

首先比较最高位，比较后可以知道以0开头的比以一开头的要少一个(事实上以0或者以1开头的都应该是4个)
所以选择少的这一组，
1:001
3:011

然后比较第二位，OK！0与1的数目是一样的，都是1。所以此时随便选择一组就可以！我们选择3！

3:011

对第三位进行比较发现此时数字仅仅剩下一个了！并且第三位是1，缺少0，所以缺少的那个数字就是2(010)；

这样就得出了结果，因为只要求求出任意一个缺失的数字！所以这样做就可以了！

最后附上一个鸽巢原理，这就是为什么说少的那一组一定是有缺失的

鸽巢原理：若有n个鸽巢, n+1只鸽子, 则至少有一个鸽巢里至少有两只鸽子。
注意这里的任意性.

1. 一年365天, 今有366个人, 则其中至少有两个人生日相同.
（当时我愣是没有反应过来，可以这样想，365天是365只桶，将356个人分别放入365个桶中，剩下的那个人你就明白了！）

2. 抽屉里有10双手套, 从中取11只出来, 其中至少有两只是完整配对的.

==========================================================================

还有正如书上所写的，二分法还用于程序调试。

当我使用vim写的程序出了错误的时候，我会首先在程序的中间进行一条输出，如果运行输出那说明问题在后半部分，否则就是在前半部分。

**二分查找的限制条件：必须是顺序存储的，必须是有序的**
