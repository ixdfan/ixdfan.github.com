---
layout: post
title: 可变长参数
categories:
- C\C++
tags:
- 可变参数表
---

可变长参数表

========================================================

1. 定义可变长参数表va_list
2. 开始可变长参数表va_start
3. 给定类型取出参数表中的值va_arg
4. 释放可变长参数表va_end

========================================================

    
    int Max(int cnt, ...)
    {
    	va_list v;			//定义可变长参数表
    	va_start(v, cnt);	//cnt之后开始可变长参数表
    	int max = va_arg(v, int);		//一定要给定类型
    	int i = 0;
    	int data;
    
    	for(i; i< cnt; i++) 	
            { 		
                 data = va_arg(v, int); 		
                 max = data > max ? data : max;
    	}
    	va_end(v);	//释放可变长参数表
    }



========================================================

    
    void my_printf(int cnt, ...)
    {
    	va_list v;
    	va_start(v, cnt);
    	int i = 0;
    	for(i; i<cnt; i++)
    		printf("%c", va_arg(v, int/*char*/));
    		//这里使用int比char更好因为在函数的使用过程中会有自动类型提升
    		//使用char编译时会有警告
    
    	puts();
    	va_end(v);	//不能漏写
    }
    
    void my_printf(int cnt, ...)
    {
    	va_list v;
    	va_start(v, cnt);
    	int i = 0;
    	for(i; i<cnt; i++)
    	{
    		puts(va_arg(v, char*));
    	}
    	va_end(v);	//不能漏写
    }


========================================================

可变长参数不仅仅可以使用在函数中，也可以使用在宏中

变长参数宏类似printf的参数,后面参数个数可以不确定.

这样可以写出比较复杂的宏，主要用于调试语句。

对于变长参数宏的支持,不同编译器有不同支持。

VC++ 7.0 (VS.net)前不支持宏的变长参数.只支持变长参数的函数设计.

换句话说宏中不能出现…。

在 GNU C 中gcc 支持的形式比较灵活,宏体即可以是函数,也可以是语句块.

变长参数宏一大应用就是调试输出宏.
在需要调试时打开调试宏,发行时只要简单关闭调试宏,则完全从程序中移走。

==============================================================

gcc的变长宏的用法 变长宏在宏名中用arg…表示,在宏体用##arg表示。
如：
#define OS_LOG(fmt,arg…) printf(fmt,##arg)     
则使用OS_LOG可用变长参数,如下列形式均可:
OS_LOG(“%s”,”hxy”); 
OS_LOG(“%d,%d”,1,2);
==============================================================
又如#define pr_debug(fmt,arg...)  printk(KERN_DEBUG fmt,##arg)
C99编译器标准允许定义可变参数宏(variadic macros)，这样就可以使用拥有可以变化的参数表的宏。

可变参数宏就像下面这个样子： 

	#define debug(…) printf(__VA_ARGS__)，

缺省号代表一个可以变化的参数表。

使用保留名 __VA_ARGS__ 把参数传递给宏。

当宏的调用展开时，实际的参数就传递给 printf()了。

例如：Debug(“Y = %d/n”, y);而处理器会把宏的调用替换成：printf(“Y = %d/n”, y);

因为debug()是一个可变参数宏，你能在每一次调用中传递不同数目的参数： 

	debug(“test”); //一个参数。 

可变参数宏不被ANSI/ISO C++ 所正式支持。 用GCC和C99的可变参数宏， 更方便地打印调试信息：

    
    
    #ifdef DEBUG 
    #define dbgprint(format,args...) fprintf(stderr, format, ##args) 
    #else
    #define dbgprint(format,args...) 
    #endif 
    


如此定义之后，代码中就可以用dbgprint了，例如dbgprint("aaa %s", __FILE__);


    
    
    #ifndef DEBUG
    #define DEBUG 1
    #define debug(fmt,arg...)
    {
    	if(DEBUG == 0)printf("DEBUG==0" fmt,##arg);\
    	else if(DEBUG==1) printf("DEBUG==1" fmt,##arg);\
    	else ;
    
    }
    #endif
    
