---
layout: post
title: 编程珠玑——第二章B与C
categories:
- 编程珠玑
tags:
- 编程珠玑
---

### 问题B:
请将一个具有n个元素的一维向量向左旋转i个位置，比如：假设n=8，i=3，那么向量abcdefgh旋转之后得到向量defghabc。
简单编码使用一个具有n个元素的中间向量分n步即完成此作业！
你可以仅仅使用几十字节的微小内存，花费与n成比例的时间来旋转该向量吗？

##### 解法一：
这肯定就是我最想想到的解法也是最笨的方法，那就是将abc放到临时空间中，然后将后面的依次向前移动i个字节，然后将临时空间中的abc复制到剩下的空间中去！不过非常的浪费空间

##### 解法二：
写一个函数，每次向左转移一个字符，转移i次，但是这样做非常浪费时间！
虽说这个方法浪费时间，但是我 都没有想到过！！！！看来我的智商果然是很低！

==================================================================

不同的算法源自对问题不同的看法，作者的这句话说的非常的好！

==================================================================
##### 解法三：
旋转向量x实际上就是将向量ab的两个 部分交换为向量ba，这里a代表x的前i个元素。

假设a比b短。因此我们可以将b分隔成为b1与b2两部分，其中b2与a等长。

交换a与b2则形成了b2	b1	a的形式

此时a已经在它的最终位置了！剩下的任务就是交换b1与b2的位置。

采用同样的方法对b1在进行分割，可以采用递归的方法进行解决！

说的在简单一些，我们可以将问题看做是将数组ab转换成数组ba，同时我们也拥有在数组中转换指定范围的函数。

首先从ab开始，转换a得到了~ab(~代表转换后的形式),在转换b得到了~a~b，然后转换整个~a~b得到了~(~a~b)

比如a中为1234，b中为5678

那么~a = 4321， ~b = 8765

~(~a~b) = 56781234

reverse为交换某个范围内的向量函数
    reverse(0, i-1)
    reverse(i, n-1)
    reverse(0, n-1)
==================================================================

还有一个非常非常巧妙的手摇算法：将一个具有10个元素的数组向旋转5个位置:
比较省内存，但是比直接开辟一块空间交换要慢很多

==================================================================
### 问题C：

给定一本英语单词词典，请找出所有的变位词集。例如，因为“pots”，“stop”，“tops”相互之间都是由另一个词的各个字母改变序列而构成的，因此这些词相互之间就是变位词。

==================================================================

将字典中的每个单词都进行签名，这样同一变位词就会有相同的签名，然后将具有相同签名的单词归拢到一起。

这样问题就变为了两个字问题：选择你的单词对应的签名；找出该签名所对应的一系列单词！

所谓的签名技术其实就是对单词字母顺序进行排列，字母最小的放在前面进行排序

比如deiops的签名就是deiopst，dopiest的签名也是它！d < e < i < o < p < s < t;所以是deiopst

当遇到例如mississippi的单词，首先排序为iiiimppssss，那么可以缩写为i4m1p2s4,m的1也可以省略写为i4mp2s4；

或者通过保存一个具有26个元素整数的数组用来指示每个单词出现的次数。

==================================================================


