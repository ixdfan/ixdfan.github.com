---
layout: post
title:  进程的调度
description: 
modified: 
categories: 
- LINUX
tags:
- 进程
---

处理机调度是多道程序操作系统调度的基础，是操作系统的核心问题。

##### 1.引起进程调度的事件:
* 正在运行的进程运行完毕或发生某事情不能在继续运行
* 运行中的进程因提出输入/输出请求二暂停运行
* 在进程通信或同步过程中运行了某种原语操作，如P操作
* 在可抢先式调度中，有一个比当前进程优先级更高的进程进入就绪队列
* 在时间片轮转法中，时间片用完

##### 2.调度的基本准则:
* 处理机利用率:尽可能让昂贵的处理机运行于繁忙之中
* 吞吐量:单位是见内所完成进程的数量尽量多
* 周转时间:从作业提交到作业完成所花费的时间，要让周转时间尽可能的小
* 后备时间:从作业抵达系统后在外存等待进入内存的时间，越小越好
* 等待时间:在就绪队列中等待调度进入处理机的时间
* 响应时间:从提交请求到产生第一响应输出的时间


#### 调度方法
##### 1.不可抢占方式(非剥夺)
##### 2.可抢占方式(剥夺)
剥夺调度有利于提高吞吐量和响应效率

##### 3.进程调度算法比较
* 先来先服务(FCFS)
* 短作业或短进程优先(SJF&SPF)
* 高响应比优先调度(HRRN)
	响应比Rp = (等待时间+预计运行事件)/预计运行时间 = 周转时间/预计运行时间
* 高优先级优先调度
* 时间片轮转调度
* 多级反馈队列调度




#### 先来先服务(FCFS)
该算法即用于作业调度，又用于进程调度,
属于不可剥夺算法，表面上他是对所有作业都公平，但是如果一个长作业先到达，会使后面的短作业等待很长时间;

##### 算法特点:
* 算法简单，效率低
* 对长作业比较有利，对短作业不利
* 有利于CPU繁忙型，不利于I/O繁忙型

#### 短作业或短进程优先(SJF&SPF)
短作业调度算法从后备队列中选择一个或若干个估计运行时间最短的作业，将他们调入内存运行

短进程优先调度算法，从就绪队列中选择一个估计运行时间最短的进程，将处理机分配给他，并使之立即运行，直到完成或发生某事件二阻塞，才释放处理机。

##### SFJ调度算法的缺点:
* 对长作业不利，SJF调度算法中长作业当周转时间会增加，更严重的是，如果有一个长作业进入系统的后备队列，由于调度程序总是有限调度那些短作业(即便是后来的)，将导致长作业长期，

#### 高优先级优先调度
该算法即用于作业调度，又用于进程调度;

算法中的优先级longue描述作业运行的紧迫程度;

在作业调度中，优先级调度算法每次从后备作业队列中选择优先级最高的作业将他们调入内存，分配必要的资源

##### 优先级的分类
* 静态优先级
优先级是在创建进程时确定的，且在进程的整个运行期间保持不变

* 动态优先级
在进程运行过程中，根据进程情况的变化动态调整优先级

#### 高响应比优先调度(HRRN)
主要用于作业调度，该算法是对FCFS和SJF的一种综合平衡，同时考虑每个作业的等待时间和估计运行时间;
每次进行作业调度时，先计算后备作业队列中每个作业当响应比，从中选出响应比最高的作业投入到运行。

响应比:
	`响应比Rp = (等待时间+要求服务时间)/要求服务时间`

根据公式:

* 1.当作业的等待时间相同时，则要求服务时间越短，其响应比就越高，有利于短作业
* 2.当要求服务时间相同时候，作业的响应比由其等待时间决定，等待时间越长，其响应比越高，因为他是先的是先来先服务。
* 3.对于长作业，作业的响应比可以随等待时间的增加而提高，当其等待时间足够长，其响应比便可以升到很高，从而也获得处理机，克服了饥饿状态，兼顾了长作业。


#### 时间片轮转调度
时间片轮转算法主要适用于分时系统，系统将所有就绪队列按到达时间的先后次序排成一个队列，进程调度程序总是选择就绪队列中第一个进程执行，也就是先来先服务的原则，但仅能运行一个时间片，用完时间片后，即使进程未完成其运行，它必须释放出(被剥夺)处理机给下一个就绪的进程，被剥夺的进程返回到就绪队列的末尾重新排队，等候再次运行。



#### 多级反馈队列调度
























