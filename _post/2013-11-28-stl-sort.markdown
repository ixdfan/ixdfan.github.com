---
layout: post
title: STL::sort
categories:
- STL
tags:
- STL
---

sort函数的头文件为algorithm

sort函数的参数是从哪里开始到哪里结束

sort(a, a+6);

sort从a开始,到a+6结束,但是不含a+6,也就是说到不了a+6的;

(a, a+6)是一个区间,用两个位置表示他的含义是是左开右闭的,含头不含尾(包含a,不含a+6),与数学中的[a, a+6)相同;

**标准模板库中一律使用这种标准表示区间。**

#### 注意：

**排序默认使用的是小于运算,如果对基本类型进行排序完全没有问题;**

** 但是如果对于自定义类型排序那就必须自己实现小于运算符;**
===============================================================
    
    
    template <typenmae T>
    void print(T begin, T end)
    {
            while(begin != end){
                    cout << *begin++ << endl;
            }
    }
    class Person
    {
    private:
            string  name;
            int     age;
    public:
            Person(const char* name, int age): name(name), age(age)
            {}
            friend ostream& operator<< (ostream& out, const Person& p)
            {
                    return out << p.name << ':' << p.age;// << endl;
            }
    };
    
    int main()
    {
            int num[6] = {8, 7, 9, 1, 2, 3};
            string str[5] = {"one", "two", "three", "four", "five"};
            Person people[3] = {Person("admin1", 19), Person("admin2", 33), Person("admin3", 25)};
    
            //sort(people, people + 3);
    	    sort(num, num + 6);
            sort(str, str + 5);
    
    	    print(people, people + 3);
            print(str, str + 5);
            print(num, num + 6);
    
            return 0;
    }


注释掉sort(people, people + 3);程序是正确的;

如果取消注释,那么就会出现一大堆的错误,这就是由于对于自定义类型的Person没有定义小于运算符导致的。

===============================================================

将小于运算符函数添加到Person类中
    
    friend bool operator < (const Person& one, const Person& other){
                    return one.age < other.age;
    }


===============================================================
