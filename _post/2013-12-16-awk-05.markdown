---
layout: post
title: awk字符串操作函数
categories:
- awk
---

awk字符串与算术处理

格式化输出

awk提供了print来完成绝大部分任务

同时海提供了两种printf和sprintf；

**printf会将格式化字符串打印到stdout**

** sprintf函数返回可以赋值给变量的格式化字符串**

    
    [root@localhost awk]# cat print.awk
    {
            x = 1
            b = "foo"
            printf("%s got a %d on the last test\n", "Jim", 83);
            myout = sprintf("%s - %d", b, x);
            print myout
    }
    [root@localhost awk]# awk -f print.awk num.txt
    Jim got a 83 on the last test
    foo - 1


awk格式化输出支持的转义字符
 
    ===============================================================
    c			ASCII字符
    s			字符串
    d			十进制整数
    ld			十进制长整数
    u			十进制无符号整数
    lu			十进制无符号长整数
    x			十六进制
    lx			十六进制无符号长整数
    o			八进制	
    lo			八进制无符号长整形
    e			科学计数法表示浮点数(e的形式)
    f			浮点数
    g			选用e或f中较短的一种形式
    ===============================================================

printf的修饰符，放在%后面

===============================================================

	- 左对齐修饰符

	# 显示八进制整数时在前面加个0，显示十六进制在前面加个0x

	+ 显示使用d、e、f和g转换的整数时，加上正负号

	0 使用0而不是空字符来填充所显示的值

===============================================================

字符串函数
    
    ===============================================================
    sub(/reg/, newstr, str)		将str中第一个匹配reg的子串替换为newstr
    
    gsub(/reg/, newstr, str)		将str中所有匹配reg的子串全部替换为newstr
    
    index(str, substr)			返回子串substr中的索引
    
    length(str)				返回字符串长度
    
    match(str, /reg/)			如果str中有正则reg匹配的串，则返回其位置，未找到返回0
    
    split(str, array, sep)		使用分隔符sep把字符串分解成数组array
    
    substr(str, position, length)	返回str中从postion开始的length个字符
    
    toupper/tolower(str)		大小写转换

    rand()				产生一个大于等于0而小于1的随机数

    srand(x)				x是rand()函数的种子
    ===============================================================



    
    function rindex(string, find,   k, ns, nf){
            ns = length(string);
            nf = length(find);
            for(k = ns+1-nf; k>=1; k--){
                    if(substr(string, k, nf) == find){
                            return k;
                    }
            }
            return 0;
    }



    
    awk截断字符串
    [root@localhost awk]# cat info.txt
    1.first
    2.second
    3.third
    [root@localhost awk]# awk '{print substr($1, 3)}' info.txt
    first
    second
    third



    
    substr第三个参数表示返回字符的个数
    [root@localhost awk]# cat info.txt
    025-587-49079:Li Lei
    025-587-49070:Uncle Wang
    025-587-49071:Han Meimei
    [root@localhost awk]# awk '{print substr($1, 5, 9)}' info.txt
    587-49079
    587-49070
    587-49071



    
    match("My id is 12345" /[0-9]+/);
    #返回10，也就是数字1出现的位置
    
    match("this is a test", /[a-z]+$/)
    #返回11，[a-z]+$表示以连续小写字母结尾的开始位置，这里是11也就是t字符
    
    echo "testthisistest"| awk '{gsub(/test/, "mytest");print}'
    将test全部替换位mytest


字符串重建

    
    s1 = "hello1"
    s2 = "hello2"
    s = s1 s2
    print s
    
    s1 = "hello1"
    s2 = "hello2"
    s = sprintf("%s%s", s1, s2);
    print s
