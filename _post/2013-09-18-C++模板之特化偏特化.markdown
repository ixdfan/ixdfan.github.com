---
layout: post
title: C++模板之特化、偏特化
categories:
- C\C++
tags:
- 偏特化
- 模板
---

	template <int n>
    class Fact
    {
    public:
    	enum {val = Fact::val * n};
    };
    tempalte <>
    class Fact<0>
    {
    public:
    	enum {val = 1};
    };
    
    cout << Fact<5>::val << endl;
    


利用模板写成的递归，针对非类型形参的特化

======================================================

    
    template <typename T>
    class Type
    {
    public:
    	static string name();
    	{
    		return typeid(T).name();
    	}
    };
    /*		模板的特化		*/
    template <>
    class Type<char>
    {
    public:
    	static string name();
    	{
    		return "char";
    	}
    };
    
    cout << Type<int>::name() << endl;
    cout << Type<char>::name() << endl;


特化与通用的模板是不相同的两个版本

#### 注意：
在类中static与限定成员函数的const不共存

const的含义是保护当前对象不被改变

static的含义是该函数不依赖于对象

将特化版本改为

    template <>
    class Type<char>
    {
    public:
    	static const char* const name;
    };
	/*	不需要再写tempalte <>	*/
    const char* const Type<char>::name = "char";
    
    cout << Type<char>::name << endl;


static在类的外部初始化，不占用类的空间

特化类中的函数卸载外部也不需要有

	template <>

======================================================

模板的偏特化：

    
    /*	偏特化，偏向指针类型，主要是指针就会与此模板匹配	*/
    tempalte <T>
    class Type<T*>	
    {
    public:
    	static string name()
    	{
    		return Type<T>::name() + " pointre";
    	}
    };
    
    cout << Type<int*>::name() << endl;
    cout << Typen<bool**>::name() << endl;


======================================================
