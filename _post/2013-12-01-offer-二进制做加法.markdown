---
layout: post
title: 二进制做加法
categories:
- 剑指offer
---

题目：
写一个函数，求两个整数的和，要求在函数体内不得使用+、=、*、/四则运算

=====================================================================

首先我们分析十进制的加法，以5+17=22为例。

实际上我们可以分成三步进行：

第一步：做各位相加不进位，此时相加5+17结果为12(5与7相加不进位那么个位就是2，十位不变，仍然是1，所以就是12)；

第二步：做进位，5+7有进位，进位值时10；

第三步：将前面两个结果相加，12+10=22，正好是5+17的结构；

=====================================================================

观察二进制的加法：

5的二进制是101,17的二进制是10001，将计算仍然分为三步：

第一步：做各位相加不进位，得到结果是101+10001=10100(最后一位不进位，所以最后一位是0);

第二步：记下进位，101+10001最后一位相加时产生了一个进位，结果是二进制的10；

第三步：将前面两个结果相加 10100+10 = 10110，也就是十进制的22；

=====================================================================

根据对二进制加法的观察，我们可以看到实际加法可以使用位运算来做；

第一步：不考虑进位对每个数相加，0+0=0,1+1=0,1+0=1,0+1=1，这个结果与异或运算是相同的；

第二部：考虑进位，对0+0，0+1,1+0来讲都不会产生进位，只有1+1才会产生进位，这个与位与运算是相同的；

我们可以将两个数先做位与运算，然后在向左移动一位，只有两个数都是1的时候，位与得到的结果就是1，其余的都是0；

第三步：重复前面两步，直到不产生进位为止；

=====================================================================

    
    
    int Add(int first, int second)
    {
    	int sum, carry;
    	do{
    		sum = first ^ second;	//第一步不考虑进位   //第三步,既是第一步，又是第三步
    		carry = (first & second) << 1;	//第二步获得进位
    		
    		first = sum;	//没有考虑进位的和
    		second = carry;	//要加上进位
    	}while(second);	//当被加数为0的时候(也就是不再有进位的时候)停止
    	
    	return sum;
    }


=====================================================================
