---
layout: post
title: Makfile搜索源文件
categories:
- Makefile
---

make可以**自动推导**文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。

只要**make看到一个"x.o"文件，它就会自动的把"x.c"文件加在依赖关系中**，如果make找到一个fun1.o，那么 fun1.c，就会是fun1.o的依赖文件。并且 cc -c fun1.c 也会被推导出来。由于.c文件会被自动推导出来因此我们只写对应依赖的.h文件即可。

make需要去找寻文件的依赖关系时，你可以在文件前加上路径，**VPATH变量的作用就是告诉make依赖文件的路径**，make会默认在当前目录中区寻找，如果当前目录中没有依赖文件就会到VPATH所对应的文件中去查找。其中使用冒号进行分隔。

=========================================================================================

实例：

	在当前文件夹下新建文件夹01、02、03
	在01中放入文件fun1.c、fun1.h
	在02中放入文件fun2.c、fun2.h
	在03中放入文件fun3.c、fun3.h
	在当前目录放入main.c

fun1.c如下：

    
    /*	fun1.h	*/
    void fun1();



    
    /*	fun1.c	*/
    void fun1()
    {
            printf("this is fun1\n");
    }



    
    /*	main.c	*/
    void fun1();
    void fun2();
    void fun3();
    
    int main()
    {
            fun1();
            fun2();
            fun3();
            return 0;
    }


fun2与fun3与fun1类似,将对应函数改为fun2与fun3即可

=========================================================================================

Makefile

    
    VPATH = 01/ : 02/ :03/
    objects = main.o fun1.o fun2.o fun3.o
    edit: $(objects)
            cc $(objects) -oedit
    fun1.o:fun1.h
    fun2.o:fun2.h
    fun3.o:fun3.h
    
    .PHONY:clean
    clean:
            rm -r edit $(objects)


make会自动推导main.o的依赖文件main.c并执行gcc -c main.c

make会自动推导fun1.o的依赖文件fun1.c并执行gcc -c fun1.c但是无法推导其他的头文件fun1.h所以我们要手动添加
假如不写VPATH的话make会报错，找不到文件

VPATH = 01/ : 02/ :03/的含义就是告诉make，如果**当前目录下找不到依赖文件时，依次去这几个目录中查找**

=========================================================================================

设置文件搜索路径的另一种方法是使用make的“vpath”关键字，这不是变量，这是一个make的关键字，它可以指定不同的文件在不同的搜索目录中。这是一个很灵活的功能。它的使用方法有三种：

1. vpath:为符合模式的文件指定搜索目录。
2. vpath:清除符合模式的文件的搜索目录。
3. vpath:清除所有已被设置好了的文件搜索目录。

需要包含“%”字符。“%”的意思是匹配零或若干字符，（需引用“%”，使用“\%"）.

例如，“%.h”表示所有以 “.h”结尾的文件。

例如：vpath %.h ../headers

该语句表示，要求make在“../headers”目录下搜索所有以“.h”结尾的文件。

我们可以连续地使用vpath语句，以指定不同搜索策略。如果连续的vpath语句中出现了相同的，或是被重复了的，那么，make会按照vpath语句的先后顺序来执行搜索。如：

	vpath %.c foo
	vpath %.c blish
	vpath %.c bar

其表示“.c”结尾的文件，先在“foo”目录，然后是“blish”，最后是“bar”目录。

	vpath %.c foo:bar
	vpath % blish

而上面的语句则表示“.c”结尾的文件，先在“foo”目录，然后是“bar”目录，最后才是“blish”目录。

=========================================================================================

如果我将所有的.c文件都移动到01目录下，将所有.h文件都移动到03目录下Makefile文件

    
    vpath %.c  01
    vpath %.h  03
    objects = main.o fun1.o fun2.o fun3.o
    edit: $(objects)
            cc $(objects) -oedit
    fun1.o:fun1.h
    fun2.o:fun2.h
    fun3.o:fun3.h
    
    .PHONY:clean
    clean:
            rm -r edit $(objects)


=========================================================================================

**vpath与VPATH仅仅对于make的自动推导有效，对于非自动推导是没有效果的**
