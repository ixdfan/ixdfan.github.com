---
layout: post
title: 从尾到头打印链表
categories:
- 剑指offer
---

题目：

输入一个链表的头结点，从尾到头反过来打印出每一个节点的值。

链表节点定义如下:

    
    struct ListNode
    {
            ListNode*       m_pNext;
    };


想要打印全部的数据必须遍历链表，但是如果想要只遍历一次就可以打印的话，那么我们必须将遇到的数据全部保存起来，无论用数组还是用栈，如果用数组的话最后要倒过来打印，就是从后向前进，如果使用栈的话，那么就可以直接打印了！
这道题目我想到了使用数组或栈，但是没有真正去实现！也没有想到递归的方式！

书上的解释是这样的：

既然想到了用栈来实现这个函数，而**递归在本质上就是一个栈结构**，于是很自然想到用递归来实现！

    
    void PrintListReversing(ListNode* pHead)
    {
            assert(pHead != NULL);
            stack<ListNode*> nodes;
    
            ListNode* pNode = pHead;
    
            while(pHead != NULL){
                    nodes.push(pNode);
                    pNode = pNode->m_pNext;
            }
    
            while( !nodes.empty()){
                    pNode = nodes.top();
                    printf("%d\t", pNode->m_nValue);
                    nodes.pop();
            }
    }


====================================================================

这个递归的方法我确实没有想出来，递归的确实很好，我确实是比较笨了！

想要反过来输出链表，要输出一个节点的时候，先递归输出它在后面的节点，再输出节点本身，这样输出的结果就翻过来了！

    
    void PrintListReversing(ListNode* pHead)
    {
            assert(pHead != NULL);
            if(pHead->m_pNext != NULL){
                    PrintListReversing(pHead->m_pNext);
            }
            printf("%d\t", pHead->m_nValue);
    }


====================================================================

**测试用例:**
功能测试(输入的链表有多个节点，输入的链表只有一个节点)

特殊用途测试(输入的立案表头节点指针为NULL)

====================================================================
