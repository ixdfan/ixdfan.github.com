---
author: UCSHELL
comments: true
date: 2013-12-16 16:28:48+00:00
layout: post
slug: awk%e7%94%a8%e6%88%b7%e8%87%aa%e5%ae%9a%e4%b9%89%e5%87%bd%e6%95%b0
title: awk用户自定义函数
wordpress_id: 1245
categories:
- awk
---

awk的用户自定义函数

格式

    
    function(arg1, arg2, arg3……){
    	statement(s)
    }
    
    function(expr1, expr2, expr3)#忽略返回值
    result = function(expr1, expr2, expr3)#将返回值存储与变量


##### 注意:

在**函数中指定的参数被当作局部变量，他们会隐藏任何相同名称的全局变量**

所有**用于函数内部且未出现在参数列表中的变量都是全局变量**。

函数内部，通过调用return expression语句返回函数执行结果，会终止函数的运行。同时如果我们不调用return语句，那么awk会返回一个默认值，一般是数字零或是空字符

awk允许被调用函数中的参数比函数定义里所声明的参数还要少，这样**额外的参数会被视为局部变量**。对于这类变量，我们一般将它列在函数参数列表中，并且在它前置一些额外的空白。对于这些额外的参数在函数内容中会被初始化为空字符串。

    [root@localhost awk]# cat func.awk
    function add(x,y,       sum){
            sum = x + y;
            return sum;
    }
    {
            m = 2
            n = 3
            x = add(m, n);
            printf("m:%d\n", m);
            printf("n:%d\n", n);
            printf("sum of m and n is %d\n", x);
    }
    [root@localhost awk]# echo "" | awk -f func.awk
    m:2
    n:3
    sum of m and n is 5


函数add中的sum参数前有几个空格，表示sum是个局部变量，sum会被初始化位零值。

##### 注意:

awk中只有值传递，**引用传递仅仅对数组有效**

    
    [root@localhost awk]# cat swap.awk
    function swap(x,y,      temp){
            temp = x;
            x = y;
            y = temp;
    }
    {
            m = 2
            n = 3
            printf("m:%d--------n:%d\n", m, n);
            swap(m, n);
            printf("m:%d--------n:%d\n", m, n);
    }
    [root@localhost awk]# echo "" | awk -f swap.awk
    m:2--------n:3
    m:2--------n:3


swap函数没有成功

    
    [root@localhost awk]# cat swap.awk
    function swap(array,    temp){
            temp = array[1];
            array[1] = array[2];
            array[2] = temp;
    }
    {
            array[1] = 2;
            array[2] = 3;
            printf("array[1]:%d--------array[2]:%d\n", array[1], array[2]);
            swap(array);
            printf("array[1]:%d--------array[2]:%d\n", array[1], array[2]);
    }
    [root@localhost awk]# echo "" | awk -f swap.awk
    array[1]:2--------array[2]:3
    array[1]:3--------array[2]:2
    [root@localhost awk]#


##### 注意:
引用传递仅仅对数组有效

awk递归调用
 
    function fibonacci(nth){
    	if(nth == 1 || nth == 0){
    		return 1;
    	}else{
    		return fibonacci(nth-1) + fibonacci(nth-2);
    	}
    
    }
    {
    	n = $1;
    	printf("%d of fibonacci sequence is :%d\n", n, fibonacci);
    }


fibnoacci的优化版本

    
    function fibonacci(nth){
    	ind = 3;
    	while(ind <= n){
    		array[ind] = array[ind-1] + array[ind-2];
    		ind++;
    	}
    
    }
    {
    	array[0] = 1;
    	array[1] = 1;
    	n = $1;
    	fibonacci(array, n);
    	printf("%d of fibonacci sequence is :%d\n", n, array[n]);
    }
