---
layout: post
title:  epoll与select和poll当区别
description: 
modified: 
categories: 
- LINUX
tags:
- epoll
---


select、poll、epoll三组I/O复用函数都是通过某种结构体变量来告诉内核监听那些文件描述符上的哪些事件，并使用该结构体类型的参数来获取内核处理的结果。

select的参数类型fd_set没有将文件描述符和事件绑定，他仅仅是一个文件描述符的集合，因此select需要提供3个这种类型的参数来分别传入和输出事件(可读、可写、异常);一方面使得select不能处理更多类型的事件，另一方面由于内核对fd_set集合的在线修改，应用程序下次调用select前不得不重置这3个fd_set集合;

poll对参数类型pollfd则"聪明"了一点，他将文件描述符和事件都定义其中，任何事件都被统一处理。从而使得编程接口简洁了很多，并且内核每次修改的是poll反对结构体中revents成员，而events成员保持不变。因此下次嗲用poll时应用程序无需重置pollfd类型的事件集和参数。由于每次select和poll调用都返回整个用户注册的事件集合(其中包括就绪和未就绪的)，所以应用程序索引就绪文件描述符的时间复杂度为O(n);


epoll则采用了与select和poll完全不同的方式来管理用户注册的事件，他在内核中维护一个事件表，bing提供一个独立的系统调用epoll_ctl来控制往其中添加、删除、修改事件。这样每次epoll_wait调用都直接从该内核事件表中取得用户注册的事件，而无需反复从用户空间读入这些事件;epoll_wait的events参数仅用来返回就绪的事件，这就使得应用程序索引就绪文件描述符的事件复杂度达到了O(1);

poll和epoll_wait分别用nfds和maxevents参数指定最多监听多少个文件描述符和事件;
这两个数值都达到了喜用允许打开的最大文件描述符数目(cat /proc/sys/fs/file-max);
但是select允许监听的最大文件描述符数量是有限制的，虽然用户可以修改这个限制，但是这可能导致不可预期的后果;


select和poll都只能工作在相对低效的LT模式，而epoll则可以工作在ET高速模式。并且epoll还支持EPOLLONESHOT事件，该事件能进一步减少可读、可写、异常等事件被触发的次数;

从实现原理来说，select和poll才用的都是轮询的方式，即每次调用都要扫描整个注册文件描述符集合，并将其中就绪的文件描述符返回给用户程序，因此他们检测就绪事件的算法的事件复杂度为O(n)。epoll_wait则不同，他才用的是回调的方式，内核检测到就绪的文件描述符将触发回调函数，回调函数就将该文件描述符上对应的事件插入内核就绪事件队列。内核最后在适当的时机将就绪事件队列中的内容拷贝都用户空间。因此epoll_wait无需轮询整个文件描述符集合来检测那些事件已经就绪，其算法时间复杂度为O(1);

但是，当活动链接比较多的时候epoll_wait的效率未必比select和poll高，因此此时回调函数被触发的过于频繁，所有epoll_wait适于链接数量多但是活动连接较少的情况


select、poll和epoll的区别

##### 1.select:

##### 事件集合:
用户通过三个参数分别传入感兴趣的可读、可写以及异常等事件，内核通过对这些参数的在线修改来反馈其中就绪事件，这使得用户每次调用select都要重置这三个参数

##### 应用程序索引就绪文件描述符的事件复杂度: O(n)

##### 最大支持文件描述符数目:一般有最大值限制

##### 工作模式:LT

##### 内核实现和工作效率:
采用轮询方式来检测就绪事件算法时间复杂度为O(n)


##### 2.poll:
##### 事件集合:
统一处理所有事件类型，因此只需要一个事件集参数，用户通过pollfd.events传入感兴趣的事件，内核通过修改poll.revents反馈其中就绪的事件;

##### 应用程序索引就绪文件描述符的事件复杂度:O(n)

##### 最大支持文件描述符数目:cat /porc/sys/fs/file-max

##### 工作模式:LT

##### 内核实现和工作效率:
采用轮询方式来检测就绪事件算法时间复杂度为O(n)

##### epoll
##### 事件集合:
内核通过一个事件表直接管理用户感兴趣的所有事件，因此每次调用epoll_wait时，无需反复传入用户感兴趣的事件，epoll_wait系统调用的参数events仅仅用来反快就绪的事件;

##### 应用程序索引就绪文件描述符的事件复杂度:O(1)

##### 最大支持文件描述符数目:cat /porc/sys/fs/file-max

##### 工作模式:ET

##### 内核实现和工作效率:
采用回调方式来检测就绪事件，算法时间复杂度为O(1)
