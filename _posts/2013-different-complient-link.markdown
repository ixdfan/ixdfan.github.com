---
layout: post
title:  编译与链接的区别
description: 
modified: 
categories: 
-  THE LINUX
tags:
- 

---


在多道程序环境中，要想将一个用户源代码变成一个可以在内存中执行的程序，通常分为三个步骤：编译、链接、载入。
1. 编译：由编译程序将用户的源代码编译成若干个目标模块。
2. 链接：由链接程序将编译后形成的一组目标模块以及它们所需要的库函数链接在一起，形成一个完整的载入模块。
3. 载入：由载入程序将载入模块载入内存。

编译和链接都是为将用户程序从硬盘上调入内存并将其转换为可执行程序服务的。用编译器时的compile就是在进行编译，link就是链接，运行程序时可以看到。

编译可以理解为高级语言翻译为计算机可以理解的二进制代码，即机器语言。
链接可以举例解释：一个程序编译后，在作业地址空间中所得到目标模块的起始地址通常是0，假设在1000处有一条指令load 1, 2500，即将2500单元处的数据取至寄存器1中。在多道程序环境下，将程序载入内存时并不可能预先知道所编译的模块应该放在内存的何处。假设程序被载入从10000开始的地址，此时的2500就应该变成了12500，这里就出现问题了，需要修改指令中的相对地址，但此时如果采用动态链接就可以不用修改地址，灵活地解决这个问题了。
链接分三种：静态链接、载入时动态链接、运行时动态链接，现在流行的是运行时动态链接，这种不仅可以回忆程序的载入过程，而且节省了大量的内存空间。
再来看C/C++的编译和链接：
无论是C/C++，首先要把源文件编译成中间代码文件，Linux下面就是.o文件，即Object File，这个动作叫编译（compile）。然后再把大量的Object File合成执行文件，这个动作叫作链接（link）。
编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（.o文件或是.obj文件）。
链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（.o文件或是.obj文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Linux下，是Archive File，也就是.a文件。
总而言之，链接就是那些目标文件之间相互链接自己所需要的函数和全局变量，而函数可能来源于其他目标文件或库文件。
总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error）,意思是说，链接器未能找到函数的实现，需要指定函数的Object File。
