---
layout: post
title: C++模板之基础
categories:
- C\C++
tags:
- 模板
---

#### 注意：
由于历史原因，所有的typename都可以换成class

在标准化以前使用的是class，标准化以后才用的typename

======================================================

模板的参数：

**模板不仅仅可以传递类型名，也可以传递非类型名**。

如下：

    template <typename T, int len>
    T a[len];
则可以由len来决定数组的大小。

#### 注意：
在编译时就要确定下数组的大小，否则运行时无法分配内存，所以**模板中的非类型名参数一定要是整数字面量或字面量表达式**。

因为要编译时就确定下来，变量在运行时候才会分配内存空间存储，所以**不可以是变量**。

比如：

    
    template <typename T, int len>
    class Test
    {
    public:
            T a[len];
    };
    
    int main()
    {
            int a = 50;//改为const int是可以的；因为const int是个常量
            Test<double, a> test;
            return 0;
    }


以上代码就是错误的。

======================================================

模板可以看做是比函数更高层次的抽象，它甚至可以有形参默认值。
    
    template <typename T = int, int len> //error,默认值只能从右开始摆放
    template <typename T = int, int len = 20>
    template <typename T , int len = 20>

======================================================

看一个例子

    
    #include <iostream>
    #include <string>
	#include <cstdlib>
	#include <cstring>

    using namespace std;

    template <typename T, int len>
    class Stack
    {
    	T buf[len];
    	int counter;
    public:
    	Stack():counter(0)
    	{}
    	~Stack()
    	{
    		counter = 0;
    	}
    	bool full() const
    	{
    		return len == counter+1
    	}
    	void push(T val)
    	{
    		if(full())
    			cout << "no enough room" << endl;
    		else
    			 buf[++counter] = val;
    	}
    	T pop()
    	{
    		if(empty())
    		{
    			cout << "It's empty" << endl;
    			return 0;
    		}	
    		else
    		{	
    			T temp = buf[counter];
    			buf[counter] = 0;
    			counter--;
    			return temp;
    		}
    	}
    	bool empty() const
    	{
    		if(0 == counter)
    			return true;
    		else
    			return false;
    	}
    };
    
    int main()
    {
    	Stack<const char*, 10> s;
    	/*		没有问题		*/
    	cout << s.pop() << endl; 	
        char buf[10]; 	
        for( ; ; ) 	
        { 	
                cin >> buf;
    			if(0 == strcmp(buf, "end"))
    				break;
    			s.push(buf);
    	}
    	cout << "======以上都是输入================" << endl;
    	cout << "======以下都是输出================" << endl;
    
    	while(!s.empty())	
    	{
    		cout << s.pop() << endl;
    	}
    
    	return 0;
    }


结果如下

    
    hello
    world
    end	
    ======以上都是输入================
    ======以下都是输出================
    end
    end


======================================================

这个程序的目的是想写一个stack，当我们输入end的时候，可以会自动结束输入。


并打印之前的内容，但是打印的结果却不是我们想要的。

为什么会输出两个end呢？？因为我们输入的类型是const char*类型的值，buf是数组首地址

但是push(buf)将buf数组的首地址放入了Stack，而不是将buf中的内容，一共保存了两次buf的地址。第三次输入的是end，所以buf中最后保存的内容是end，因此pop();也就将两个buffer中的地址弹出来。

所以是两个end。

这个例子说明对于const char*类型并不适合刚刚的通用模板，因此我们可以单独写一个处理const char*的模板

    
    tempalte <int len> //虽然不用传递T的类型了,但是还可以传递len的长度
    class Stack<const char*>
    {
    	string buf[len];
    	int counter;
    public:
    	……
    	void push(const char* d)
    	{……}
    	const char* pop()
    	{
                     ……
    		return buf[counter].c_str;// 注意转换为c风格的字符串
    	}
            ……
    
    };


这样就可以专用于const char*类型的处理了，这就是模板的特化
