---
author: UCSHELL
comments: true
date: 2013-12-17 04:24:46+00:00
layout: post
slug: stlset
title: STL::set
wordpress_id: 1276
categories:
- STL
---

**set是建立在数据结构红黑树(RB-Tree)。**

set是一种包含已排序对象的关联容器。

set的**特点是：所有元素都会根据键值自动被排序。**

**关联容器是有键和值的，而set的键就是值，值就是键；**

#### 注意：
**关联容器的键是不允许被改变的，所以set的值时不能被修改的。set不允许两个元素具有相同的键。**

**set采用的是非线性链表结构——树，所以它的迭代器不会向vector容器的迭代器那样因为重新分配存储区而失效。**

    
    private:
          typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;
    
          typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
                           key_compare, _Key_alloc_type> _Rep_type;
          _Rep_type _M_t;  // Red-black tree representing set.
          ……
          set(): _M_t() { }
          ……

可以看到set确实是建立在红黑树的基础上的。

================================================================

begin
    
    iterator begin();
    const_iterator begin() const;

作用:

返回一个指向set容器中其实元素的迭代器

================================================================

clear

    void clear();

作用:

删除set中所有元素

================================================================

count
    
    size_type count(const Key& Key) const;

作用:

返回set容器中元素键值为Key的元素的个数

================================================================

empty
    
    bool empty() const;

作用:

如果set容器中没有容纳任何元素，则empty返回true

================================================================

end
    
    const_iterator end() const;

作用:

返回指向set容器中末尾元素的迭代器，例如[a, b)中指向b

================================================================

erase

    iterator erase(iterator it);
    iterator erase(iterator first, iterator last);

作用:

删除set容器中it位置的元素，或者删除在first与last之间的元素；

函数返回的是指向set容器中被删除的最后一个元素的下一个位置的迭代器

================================================================

find

    const_iterator find(const Key& key) const;

作用:

返回set容器中一个指向找到元素的迭代器，如果没找到则返回set尾部的迭代器

================================================================

get_allocator
  
    allocator_type get_allocator() const;

作用:

返回set容器的内存分配器

================================================================

insert

    pair<iterator, bool> insert(const value_type& x);
    iterator insert(iterator it, const value_type& x);
    void insert(const value_type* first, const value_type* last);

作用:

在迭代器中插入值为x的元素；

在迭代器it指定的位置前插入值为x的元素；

在容器中插入区间[first, last)中所有的元素；

================================================================

max_size

    size_type max_size() const;

作用:

返回set容器所能容纳的元素数量的最大值

================================================================

rbegin

    const_reverse_iterator rbegin() cosnt;

作用:

返回指向set末尾的反向迭代器

================================================================

rend

    reverse_iterator rend();
    const_reverse_iterator rend() cosnt;

作用:

返回指向set起始位置的反向迭代器

================================================================

size

    size_type size() const;

作用:

返回set容器所容纳元素的数目

================================================================

swap

    void swap(set& str);

作用:

交换当前set容器与str容器中的元素，str是一个set容器

================================================================

lower_bound

    const_iterator lower_bound(const Key& key) const;

作用:

返回set容器中小于或等于key的第一个元素的迭代器。

================================================================

upper_bound
 
    const_iterator upper_bound(const Key& key) const;

作用:

返回set容器中小于或等于key的第一个元素的迭代器。

================================================================

equal_range
  
    pair<const_iterator, const_iterator>equal_range(const Key& key) const

作用:

返回map容器中与定值相等的上下限的两个迭代器；

返回连个迭代器，一个指向map容器中第一个键值为key的元素，一个指向map中最后一个键值为key的元素

================================================================

key_comp

    key_compare key_comp(const Key& key) const;

作用:

返回一个用于元素箭的键的比较函数

================================================================

value_comp

    value_compare value_comp(const Key& key) const;

作用:

返回一个用于元素间的值比较函数

================================================================

**multiset(多元集合)和set(集合)的特性和用法完全相同，唯一不同的是multiset支持重复键值**
