---
author: UCSHELL
comments: true
date: 2013-09-17 08:25:11+00:00
layout: post
slug: c%e8%b6%85%e5%87%ba%e8%8c%83%e5%9b%b4%e7%9a%84%e6%95%b0%e5%80%bc%e7%9a%84%e8%a1%a8%e7%a4%ba
title: C++超出变量范围的赋值
wordpress_id: 623
categories:
- THE C/C++
---

C++中数值的表示：

当我们把一个超出取值范围的值赋给一个指定类型的对象的时候，结构取决于这种类型是unsigned还是signed的。

对于unsigned类型来说，编译器会将该值对unsigned表示的类型的**取值个数**求模(求余数)，然后去所得值。**注意是能够取值的个数，不是最大的值。**

======================================================

比如8位的unsigned char，取值范围从0～255(包括255)，如果赋一个超过他的范围的值，编译器会取该值与256(个数)求模后的值。

比如将386赋值给unsignded char的变量，则变量中实际为80

C++中将负数赋值给unsigned是完全合法的，其结果是该负数对该类型的取值个数求模后的值

比如将-1赋值给unsigned char类型的变量，那么变量实际位255，因为255是-1对256求模后的值

对signed处理也是类似的，不过不能保证编译器都会这样处理signed类型

**注意：C++表达式中存在有符号类型和无符号类型时所有的操作数都自动转换为无符号类型**

例如：

    unsigned int num1 = 1;
    int num2 = -8;
    cout << a+b << endl;

======================================================

    
    int maxProfit(vector &prices) { 
         int profit = 0; 
         int size = prices.size() - 1; 
         for(int i = 0; i < ( prices.size() - 1); ++i)
         {           
                if(prices[i+1] > prices[i]) 
                       profit += (prices[i+1] - prices[i]); 
         } 
         return profit; 
    }


这段代码中的错误比较隐蔽
输入一个空prices的时候，运行出错，因为能运行到for循环里头；

如果把 i < ( prices.size() - 1)改成 i < size，则不会进入for循环；

原因就是在于vector中的size()是unsigned类型的，当输入为空的时候运算(size()-1)也是无符号的 = 0xffffffff;

由于是无符号的,所以输入空的时候任然会循环

======================================================
