---
layout: post
title:  elf文件格式
description: 
modified: 
categories: 
-  THE LINUX
tags:
- 

---
`
ELF解析:
在linux下无论是可重定的目标文件还是可执行的目标文件均采用这种格式。ELF格式的目标文件中不仅包含二进制的代码和数据，还包括很多帮助连接器解析符号和解释目标文件的信息.

ELF由两部分构成:**ELF文件头**和**目标文件的段**

##### ELF文件头

ELF文件头的前16个字节构成了一个字节序，描述了生成该文件系统的字长以及字节序；剩下的内容包括ELF文件头的大小、目标文件的类型、目标机的类型、段头部表在目标文件内的文件偏移位置。在链接和加载ELF格式的程序时，这些信息是很重要的。

##### 目标文件的段

目标文件段是ELF的核心部分,由以下几个段组成:

##### .text:代码段

已编译的程序的机器代码(二进制的机器指令，可以被机器直接运行)

##### .rodata：只读数据段
比如某些常量，例如printf中的格式字符串

###### .data:数据段
已初始化的全局C变量。注意:局部C变量运行时被保存在栈中，既不会出现在.data中又不会出现在.bss中

##### .bss:未初始化的全局C变量
**在目标文件中这个字不占据实际的空间**，它仅仅是一个占位符，目标文件格式区分初始化和未初始化变量时为了效率:在目标文件中未初始化变量不需要占据任何实际的磁盘空间;

##### 以上的四个段会被实际加载到内存中，是实实在在的程序段。

目标文件还有一些辅助程序进行连接和加载的信息，这些信息并不会加载到内存中去，这些信息在生成最终的可执行目标文件时候就已经被去掉了！

##### .sysmtab:符号表
存储程序中被定义和引用的函数和全局变量，每个可重定位目标文件中都有这样的一个表。但是和编译器中的符号表不同，.sysmtab符号表并不含局部变量的表目；所以不必使用-g编译程序以得到这张表，因为每个可重定位目标文件中都有这样的一个表！

##### .rel.text:
当连接器把这个目标文件和其他文件结合时，.text节中的许多位置都要重新修改，一般而言，任何调用外部函数或者引用全局变量的指令都需要修改；另一方面，调用本地函数的指令则不需要修改。

###### 注意:
可执行目标文件中并不需要重定位信息，所以通常省略，除非显式知识连接器要包含这些信息

##### .rel.data:被模块定义或引用的任何全局变量的信息
一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都要被修改

##### .debug:调试符号表
其中有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C文件。只有使用-g选项调用编译程序后才会得到这张表

##### .line:
原始C源程序中的行号和.text节中机器指令之间的映射，只有使用-g选项调用编译驱动时，才会得到这张表。

##### .strtab:一个字符表串
内容包括.symtab和.debug节中的符号表，以及节头部中的节名字，字符串表就是以null结尾的字符串序列。

#####注释:为什么未初始化的数据称为.bss
他起源于IBM 704汇编语言中t快存储开始(Block Storage Start)指令的首字母缩写，并使用至今。区分.bss和.data的方法是将.bss看成更好的节省空间(Better Save Space)的缩写
