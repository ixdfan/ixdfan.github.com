---
layout: post
title:  dup与dup2函数
description: 
modified: 
categories: 
- LINUX
tags:
- IO

---
有时候我们希望将标准输入重定向到一个文件中去，或者将标准输出重定向到一个网络链接(例如CGI编程)，可以使用dup与dup2函数实现;


       int dup(int oldfd);
       int dup2(int oldfd, int newfd);

dup函数创建一个新的文件描述符，该新文件描述符和原有文件描述符oldfd指向相同的文件、管道或是网络链接。
并且dup返回的文件描述符总是取系统当前可用的最小整数值。

dup与dup2类似，不过它将返回一个不小于newfd的整数值

##### 注意:
dup与dup2并创建的新描述符不会继承原文件描述符的属性，例如non-blocking



	int main(int argc, char** argv)
	{
		const char* ip = "127.0.0.1";
		int port = 80;
		
		struct sockaddr_in address;
		bzero(&address, sizeof(address));
		
		address.sin_family = AF_INET;
		address.sin_port = htons(port);
		inet_pton(AF_INET, ip, &address.sin_addr);
		
		int sock = socket(AF_INET, SOCK_STREAM, 0);
		assert(sock > 0);
		
		int ret = bind(sock, (struct sockaddr*)&address, sizeof(address));
		assert(ret != -1);
		
		ret = listen(sock, 5);
		assert(ret != -1);
		
		struct sockaddr_in client;
		socklen_t client_addrlength = sizeof(client);
		int connfd = accept(sock, (struct sockaddr*)&client, &client_addrlength);
		if (connfd < 0) {
			printf("errno is %s\n", strerror(errno));
	
		} else {
			close(STDOUT_FILENO);
			/* 将connfd重定位到标准输出, STDOUT_FILENO值为1, 
			因为dup总是返回系统中最小的可用的文件描述符，fd = 1 */
			int fd = dup(connfd);
			printf("abcd\n");
			close(connfd);
		}
		
		close(sock);
	
		return 0;
	}
	
	
服务器输出到标准输输出的内容("abcd\n")直接发送到了客户链接对应的socket上，因此printf调用的输出将被客户端获得(而不会显示在服务器终端上)，这就是CGI服务器的基本工作原理;

