---
layout: post
title: 获取链表倒数第m个元素
categories:
- ALGORITHM
tags:
- 链表
---

在之前深信服的算法面试过程中我深深的体会到了自己的劣势！算法与数据结构！所以我下决心死啃算法与数据结构！我相信勤能补拙！！！

题目如下：

给定一个单向链表，设计一个时间优化并且空间优化的算法，找出该链表的倒数第m个元素。实现您的算法，注意处理相关的出错情况。m定义为当m=0时，返回链表最后一个元素。

链表只能够正向的遍历，乍一看我能想到的就是最笨的方法！遍历来统计有多少个元素，然后再次遍历n-m次，得到第m个元素！

但是显然这种办法实在是太笨！！！需要遍历两次，虽然遍历一次的时间复杂度也是O(n)

第二种方法确实非常的好！

我们想要的就是倒数第m个元素，那么只要我们到达最后一个节点的时候取得它之前的第m个元素就可以了！

这个就好像是滑动窗口一样！

假如我们使用两个指针，两个指针之间的距离保持为m，当后一个指针到达了结尾的时候，那么前一个指针是不是就是倒数第m个元素呢？

=======================================================================================================

如何获得单链表中间的节点？？只能一次遍历

类似的原理:

使用两个指针保证高指针始终是低指针的二倍！

当高指针到达了结尾时低指针恰好在链表的中央！

高指针每次前进两个节点

低指针每次前进一个节点

    
    
    struct Node
    {
    	int data;
    	Node* next;
    };
    Node* low = head;
    Node* hight = head;
    
    while(hight->next)
    {
    	low = low->next;
    	hight = hight->next->next;
    }
    


=======================================================================================================
