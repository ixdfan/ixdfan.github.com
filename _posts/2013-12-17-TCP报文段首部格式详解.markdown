---
author: UCSHELL
comments: true
date: 2013-12-17 04:13:52+00:00
layout: post
slug: tcp%e6%8a%a5%e6%96%87%e6%ae%b5%e9%a6%96%e9%83%a8%e6%a0%bc%e5%bc%8f%e8%af%a6%e8%a7%a3
title: TCP报文段首部格式详解
wordpress_id: 1266
categories:
- 网络编程
---

当编码数量达到一定的程度的时候，我们会发现，原来理论真的很重要；所以我才把《计算机网络》仔细的看了一下，要是换在以前，我一定觉的这些纯属理论，没有什么实际用处。但是现在我发现我真的就是缺少这些理论。

    
    TCP的头格式为： 
    struct tcphdr { 
    	__u16 source;	/*源地址端口*/ 
    	__u16 dest;	/*目的地址端口*/ 
    	__u32 seq;	/*序列号*/ 
    	__u32 ack_seq;	/*确认序列号*/ 
    	__u16 res1:4,	/*保留*/ 
    	doff:4,		/*偏移*/ 
    	fin:1,		/*关闭连接标志*/ 
    	syn:1,		/*请求连接标志*/ 
    	rst:1,		/*重置连接标志*/ 
    	psh:1,		/*接收方尽快将数据放到应用层标志*/ 
    	ack:1,		/*确认序号标志*/ 
    	urg:1,		/*紧急指针标志*/ 
    	ece:1,		/*拥塞标志位*/ 
    	cwr:1;		/*拥塞标志位*/ 
    	__u16 window;	/*滑动窗口大小*/ 
    	__u16 check;	/*校验和*/ 
    	__u16 urg_ptr; /*紧急字段指针*/ 
    }; 
    头文件：linux/tcp.h


===================================================================================

##### 源端口和目的端口

各占2个字节，分别写入源端口号和目的端口号

===================================================================================

##### 序号：这个字段的名字也叫报文段序号

占四个字节，序号的范围是[0-2^32-1],共2^32个序号。序号增加到2^32-1时候，下一个序号就又回到0，也就是说，序号使用mode 2^32运算；

TCP是面向字节流的，在TCP连接中传送的字节流中的每一个字节都按顺序编号，整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号。

例如：

一个报文段中序号字段值是301，而携带的数据共有100字节，这就表明本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400。显然下一个报文段的序号应该从401开始，即下一个字节的序号字段值应为401。

===================================================================================

##### 确认号：

占4个字节，是期望收到对方下一个报文段的第一个数据字节的序号；
例如：B正确收到A发送过来的一个报文字段，其序号字段值时501，而数据长度是200字节(序号501-700)，这表明B正确收到了A发送的到序号700为止的数据。因此B期望收到A的下一个数据号是701，于是B在发送给A的确认报文段中把确认号置为701，注意：确认号是701

##### 注意：

若确认号 = N，则表明到序号N-1为止的所有的数据都已正确收到

===================================================================================

##### 数据偏移：

占4位，他指出TCP报文段的数据起始处距离TCP报文段的起始处有多远，这个字段时间上是指出TCP报文段的首部长度。

由于首部中还有很多不确定的选项字段，因此数据偏移字段是必要的。

##### 注意：

数据偏移字段的单位是32位(即4字节为计算单位)。由于4位二进制数能够表示的最大十进制数字是15，因此数据偏移的最大值是60字节，这也是TCP首部的最大长度(即选项长度不能超过40字节)。

===================================================================================

##### 保留数据：

占6位，保留为今后使用，但是现在置为0

===================================================================================

##### 紧急URG：

当URG = 1时，表明紧急指针字段有效，他告诉系统此报文段中有紧急数据，应尽快传送(相当于高级优先数据)，而不要按原来的排队顺序来传送。

例如：

已经发送了很长的一个程序要在远程主机上运行，但是后来发现一些问题，需要取消该程序的运行，因此用户从键盘上发出中断指令(Ctrl+c)。如果不适用紧急数据，那么这两个字字符将被存储在接受TCP的缓存末尾。只有在所有的数据都被处理完毕后这两个字符才被交到接收方的应用进程，这样就浪费了时间。

当URG置为1时候，发送应用进程就告诉发送方的TCP有紧急数据要传送，于是发送方TCP就把紧急数据插入到本报文段数据的最前面，而近期数据后面的数据仍然是普通数据。这时要与紧急指针字段配合使用。

===================================================================================

##### 确认ACK

仅当ACK=1时候确认号字段才有效，当ACK=0时，确认号无效，TCP规定在连接建立后所有传送的报文段都必须把ACK置为1

===================================================================================

##### 推送PSH

当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入下一个命令后立刻就能够收到对方的响应。在这种情况下，TCP就可以使用推送操作。这是，发送方TCP把PSH置1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文段就尽快的(即“推送”向前)交互给接收应用进程，而不再等待这个缓存都填满后再向上交付。

===================================================================================

##### 复位RST

当RST=1时，表明TCP连接中出现差错控制(如由于主机崩溃或其他原因)，必须释放连接，然后再重新建立运输连接。RST置为1还用来拒绝一个非法的报文段或拒绝打开一个连接。RST也称为重建位或重置位。

===================================================================================

##### 同步SYN

在建立连接时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段，对方若同意建立连接，则应在响应的报文段中使用SYN=1或ACK=1。因此SYN置为1就表示证实一个连接请求或连接接受报文

===================================================================================

##### 终止FIN

用来释放一个连接，当FIN=1时，表明此报文段的发送方的数据已发送完毕，并要求释放运输连接。

===================================================================================

##### 窗口

占2字节，窗口指的是发送本报文段的一方的接收窗口(而不是自己的发送窗口)。

窗口告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。之所以要有这个限制，是因为接收方的数据缓冲空间是有限的。总之，窗口值作为接收方让发送方设置其发送窗口的依据。

例如：确认号是701，窗口字段是1000，这就表明从701号算起，发送此报文段的一方还有接受1000个字节数据(字节序号701-1700)的接受缓存空间。

##### 注意：

* 即使窗口值为0时，也可以发送紧急数据

* 窗口字段明确指出了现在允许对方发送的数据量，窗口值是经常在动态变化的。

===================================================================================

##### 检验和

占2字节，检验和字段检验的范围包括首部和数据两部分，和UDP用户数据报一样，在计算检验和的时候要在TCP报文段的前面加上12字节的伪首部。接收方收到此报文段后，仍要加上这个伪首部来计算检验和。
===================================================================================

##### 紧急指针

占两个字节，紧急指针仅仅在URG=1时才有意义，他指出本报文段中的紧急数据的字节数(紧急数据结束后就是普通数据)。因此紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据都处理完毕时，TCP就告诉应用程序恢复到正常的操作。

##### 注意：即使窗口值为0时，也可以发送紧急数据

===================================================================================
#### TCP选项

长度可变，最长可达40字节，当没有使用选项时，TCP的首部长度是20字节

TCP的选项主要有一下几个：

##### 最大报文长度(MSS):
MSS是每一个TCP报文段中的数据字段的最大长度。

数据字段加上TCP首部才等于整个TCP报文段，所以MSS并不是这个TCP报文段的最大长度，而仅仅是数据字段的最大长度；

##### 窗口扩大因子/选项:
窗口扩大因子占3个字节，其中有一个字节表示移位值S。新的窗口值等于TCP首部中的窗口位数从16位扩大到(16+S)位，这相当是把窗口值向左移动S位后获得实际窗口的大小。

窗口扩大选项是为了扩大窗口。TCP首部中窗口字段长度16位，因此最大的窗口大小为64K字节。这对于早期的网络是完全足够的，但是对于包含卫星信道的网络，传播时延和宽带都很大，要获得高吞吐量需要更大的窗口大小。

窗口扩大选项可以在双方初始建立TCP连接时进行协商。如果连接的某一端实现了窗口扩大，当它不在需要扩大其窗口时，可发送S=0的选项，是窗口大小回到16。

##### 时间戳选项：
时间戳选项占10个字节，最主要的字段是时间戳值字段(4字节)和时间戳回送回答字段(4字节)

时间戳选项有一下两个功能：

(1)用来计算往返时间RTT。发送方在发送报文段时把当前时间钟的时间值放入时间戳字段，接收方在确认该报文段时把时间戳字段值复制到时间戳回送回答字段因此，发送方在接收到确认后可以准确的计算出RTT来。

(2)用于处理TCP序号超过2^32的情况，这又称为防止序号绕回PAWS，我们知道序号只有32位，而每增加2^32个序号就会重复使用原来使用过的序号。当使用高速网络时，在一次TCP连接的数据传送中序号很可能会被重复使用。例如1Gb/s的速率发送报文段，则不到4.3秒数据字节的序号就会重复，为了使接收方能够把新的报文段和迟到很久的报文段区分开，可以在报文段中加上时间戳。

##### 选择确认选项(STCK)

最大报文段长度（MSS）表示TCP传往另一端的最大块数据的长度。当建立一个连接时，每一方都有用于通告它期望接收的MSS选项（MSS选项只能出现在SYN报文段中）。通过MSS，应用数据被分割成TCP认为最适合发送的数据块，由TCP传递给IP的信息单位称为报文段或段(segment)。

TCP通信时，如果发送序列中间某个数据包丢失，TCP会通过重传最后确认的包开始的后续包，这样原先已经正确传输的包也可能重复发送，急剧降低了TCP性能。为改善这种情况，发展出SACK(SelectiveAcknowledgment,选择性确认)
技术，使TCP只重新发送丢失的包，不用发送后续所有的包，而且提供相应机制使接收方能告诉发送方哪些数据丢失，哪些数据重发了，哪些数据已经提前收到等。

===================================================================================
