---
layout: post
title:  TCP如何保证可靠传输
description: 
modified: 
categories: 
- THE NETWORK
tags:
- TCP

---

TCP的任务是在IP层的不可靠、尽力而为的基础上建立一种可靠数据传输服务。

TCP提供的可靠数据传输服务就是要保证接收方进程从缓存区读取的字节流于发送方发出的字节流是完全一样的。

TCP使用**校验、序号、确认、重传机制**来达到这个目的

### 1.序号
TCP首部的序号字段用来保证数据能够有序提交给应用层，TCP将数据看成一个无结构但是有序的字节流，而序号就建立在传送的字节流之上的，而不是建立在报文段之上！

TCP连接中传送的数据流中的每一个字节都编上序号。序号字段的值则是指本报文段所发送的数据的第一个字节的序号。

![002](\uploads\2014\03\003.jpg)

假设A和B之间建立一条TCP连接，A的发送缓存区中共有10个字节，序号从0开始标号，第一个报文包含第0~2个字节，则该TCP报文段的序号是0；

### 2.确认
TCP首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号

TCP默认使用累计确认，也就是TCP只确认数据流中之第一个丢失字节为止的字节

例如:

接收方收到了A发送的包含字节0~2以及字节6~7的报文段，由于某种原因没有收到3~5的报文段，此时B仍在等待3(和后面其他的字节)，因此B到A的下一个报文段将确认字段ack设置为3。

### 3.重传
有两种事件会导致TCP对报文段进行重传:超时和冗余ACK
1. 超时

TCP 每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传事件到期但还没有收到确认，就要重传这一报文段；

由于TCP下层是一个互联网环境，IP数据报所选择的路由变化很大。因而传输层的往返时延的方差也很大。为了计算超时时计时器的重传事件，TCP采用一种自适应算法，它记录一个报文段发出的事件。以及受到相应确认的事件，这两个时间之差叫做报文段的往返事件(RTT),TCP保留了RTT的一个加权平均往返事件RTTs。

2.冗余ACK(冗余确认)

超时触发重传存在的一个问题就是超时周期往往太长，但是发送方可以在超时事件发生之前通过注意冗余ACK来较好的检测丢包情况。

冗余ACK就是再次确认某个报文段的ACK，而发送方先前已经收到过该报文段的确认了！

TCP规定每当比期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号；

**TCP规定当发送方收到对同一个报文段的3个冗余ACK时，就可以认为跟在这个被确认报文段之后的报文段已经丢失！**

例如：发送发A发送了序号1、2、3、4、5的TCP报文段，其中2号报文段在链路中丢失，它将无法到达接收方B；因此3、4、5号报文段对于B来讲是成了失序报文段；3、4、5不是B所期望的下一个报文，于是B就发送3个对1号报文段的冗余ACK，表示自己期望接收2号报文段。
当A收到对1号报文段的3个冗余ACK时，则它就可以认为2号报文段已经丢失，这时发送方A可以立即对2号报文段执行重传，这种技术成为快速重传

