---
author: UCSHELL
comments: true
date: 2013-11-29 02:11:54+00:00
layout: post
slug: stllist
title: STL::list
wordpress_id: 1125
categories:
- STL
tags:
- STL
---

##### 注意：list是双向循环链表；

**list不支持对任意元素的存取**(即不允许通过下标[]存取)

list中提供的成员函数和vector类似，但是list提供对表首元素的操作**push_front、pop_front**这是vector不具备的；

##### 注意：
**list的迭代器不存在失效的情况**，这与vector不同， list不会保留备份空间，不会在超过容量额度时重新分配全部内存，而导致迭代器失效。list没有备份空间的概念，**插入一个元素就申请一个元素的空间，所以它的迭代器不会失效；**

list是双向循环链表，所以只要一个指针就能遍历整个链表；

在list和vector的使用上，需要注意两者的区别，**vector是连续分配的栈上空间，同时在超过他的容量额度时，又会重新分配新的大的内存存储区，并拷贝到新的存储区，然后销毁旧的内存存储区，所以当vector中的元素，在vector容量增大而重新分配存储空间后，元素因为拷贝到新的内存区而调用拷贝构造函数，这样他就存在构造成本；**

**同时旧的vector内存存储区被销毁，他里面的旧的元素的析构函数被调用，这时就存在析构成本；**

同时当vector的元素越多时候，每次重新申请分配的内存就越大，需要拷贝的元素就越多，消耗的成本就越大，vector的成本是随自身的增长而增长。

##### 总结：
**vector只适合简单类型和元素个数不太多的情况**，这时候他的效率要超过list，list每次增加一个元素，不存在重新申请内存的情况，他的成本是恒定的，**他在存储复杂类型和大型元素的情况下，比vector更有优势；**

================================================================

assgin
    
    void assgin(const_iterator frist, const_iterator last);
    void assgin(size_type n, const T& x = T());


作用:

将区间[first, last)的元素赋值到当前list容器中；

赋n个值为x的元素到list容器中，这个函数将会清除掉list容器以前的内容

================================================================
back
    
    reference back();
    const_reference back() const;


作用:

返回list容器中的最末尾的元素的引用

================================================================
begin

    
    iterator begin();
    const_iterator begin() const;


作用:

返回一个指向list容器中其实元素的迭代器

================================================================
clear

    
    void clear();


作用:

删除list中所有元素

================================================================

empty

    
    bool empty() const;


作用:

如果当前list中没有容纳任何元素，则empty返回true

================================================================

end

    
    iterator end();
    iterator end() const;


作用:

返回指向list容器中最后一个元素的下一个元素，例如[a, b)中指向b

================================================================

erase

    
    iterator erase(iterator it);
    iterator erase(iterator first, iterator last);


作用:

删除list容器中it位置的元素，或者删除在first与last之间的元素；

函数返回的是指向list容器中被删除的最后一个元素的下一个位置的迭代器

================================================================

front

    
    reference front();
    const_reference front() const;


作用:

返回list容器中起始元素的位置

================================================================

get_allocator
    
    allocator_type get_allocator() const;

作用:

返回list容器的内存分配器

================================================================
insert

    
    iterator insert(iterator it, const T& x = T());
    void insert(iterator it, size_type n, const T& x);
    void insert(iterator it, const_iterator first, const_iterator last);


作用:

在容器迭代器it指向的位置前插入值为x的元素，返回指向这个元素的迭代器；

在迭代器it指定的位置前插入n个值为x的元素；

在迭代器it制定的位置前插入区间[first, last)中所有的元素；

================================================================

max_size
    
    size_type max_size() const;

作用:

返回list容器所能容纳的元素数量的最大值

================================================================

merge
    
    void merge(list& x);
    void merge(list& x, greater pr);


作用:

将当前list容器和x容器连接到一起，产生一个整齐排列的list容器；

指定pr，则讲条件pr作为比较的依据

================================================================

pop_back
    
    void pop_back();

作用:

删除list容器最末尾的元素

================================================================
**pop_front**

    
    void pop_front();


作用:
删除list容器第一个的元素
================================================================
push_back

    
    void push_back(const T& val);


作用:
添加值为x的元素到list的末尾
================================================================
**push_front**

    
    void push_front(const T& x);


作用:
添加值为x的元素到list容器开头
================================================================
rbegin

    
    reverse_iterator rbegin();
    const_reverse_iterator rbegin() cosnt;


作用:
返回指向list末尾的反向迭代器
================================================================
rend

    
    reverse_iterator rend();
    const_reverse_iterator rend() cosnt;


作用:
返回指向list起始位置的反向迭代器
================================================================
reserve

    
    void reserve(size_type n);


作用:
为list容器预留可以容纳n个元素的空间
================================================================
resize

    
    void resize(size_type n, T x = T())


作用:
改变list容器的大小为n，且对新创建的元素赋值x
================================================================
size

    
    size_type size() const;


作用:
返回list容器所容纳元素的数目
================================================================
swap

    
    void swap(list& x);


作用:
交换当前list容器与x容器中的元素，x是一个list容器
================================================================
**remove_if**

    
    void remove_if(greater pr)


作用:
条件pr作为判断的依据，遍历整个链表，若pr返回为true则删除这个元素
================================================================
**sort**

    
    void sort()
    
    template 
    void sort(greater pr)	//greater pr是手动指定的比较条件


作用:
对list容器排序，默认是升序，如果指定条件pr，则采用pr来判断两个元素的大小
================================================================
**splice**

    
    void splice(iterator it, list& x);
    void splice(iterator it, list& x, iterator first);
    void splice(iterator it, list& x, iterator first, iterator last);


作用:
把x容器连接到当前容器的迭代器it指定的位置；
把x容器中迭代器first指代的元素连接到当前容器的迭代器it指定的位置；
把x容器中first和last指定范围的元素连接到当前容器的迭代器it指定的位置；
================================================================
**unique**

    
    void unique()
    void unique(greater pr)


作用:
删除list容器中指定的元素；
指定条件pr则使用pr来判定是否删除
================================================================
