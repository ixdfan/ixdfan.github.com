---
layout: post
title:  mmap与munmap
description: 
modified: 
categories: 
- LINUX
tags:
- mmap
---

mmap用于申请一段内存空间，我们可以将这段内存空间作为进程间通信的共享内存，也可以将文件直接映射到其中，munmap则释放由mmap创建的这段内存空间。


       void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
       int munmap(void *addr, size_t length);



addr参数允许用户使用特定的地址作为这段内存的起始地址，如果将其设置为NULL，则系统自动分配一个地址。

length参数指定内存短的长度

prot参数设置内存段访问权限:

* PROT_READ	内存段可读
* PROT_WRITE	内存段可写
* PROT_EXEC	内存段可执行
* PROT_NONE	内存段不能被访问




flags参数控制内存段内容被修改后程序的行为，它可以被设置为如下的按位或(MAP_SHARED和MAP_PRIVATE是互斥的，不能同时指定)

* MAP_SHARED:进程间共享这段内存，对该内存的修改将反映到被映射的文件中，它提供了进程间共享内存的POSIX方法


* MAP_PRIVATE:内存段为调用进程所私有，对该内存段的修改不会反映到被映射的文件中

* MAP_ANONYMOUS:这段内存不是从文件映射而来的，其内容被初始化为全0,这种情况下mmap的最后两个参数将被忽略

* MAP_FIXED:内存段必须位于addr参数指定的地址处，addr必须是内存页面大小(4096)的整数倍

* MAP_HUGETLB:按照"大内存页面"来分配n内存空间，"大内存页面"大小通过/proc/meminfo来查看


fd是被映射文件对应的文件描述符，它一般通过open函数调用获得;

offset参数设置从文件的何处开始映射(用于不需要读入整个文件的情况)

mmap成功时返回指向目标内存区域的指针，失败返回MAP_FAILED((void*)-1)，并设置errno

munmap成功返回0,失败返回-1




	int main(int argc, char* argv)
	{
		int fd;
		char* buf;
		int i;
		struct stat statbuf;
		
		if (stat("dup.c", &statbuf) == -1) {
			perror("fail to get stat");
			exit(-1);
		}
	
		fd = open("dup.c", O_RDONLY);	
		if (-1 == fd) {
			perror("open error");
			exit(-1);
		}	
		
		buf = (char*)mmap(NULL, statbuf.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
		
		if (buf == MAP_FAILED) {
			perror("fail to mmap");
			exit(-1);
		}
		
		i = 0;
		
		while (i < statbuf.st_size) {
			printf("%c", buf[i]);
			i++;
		}
		printf("\n");
		
		if (munmap(buf, statbuf.st_size) == -1) {
			perror("fail to munmap");
			exit(-1);
		}
		close(fd);
		return 0;
	}
	
	

	
