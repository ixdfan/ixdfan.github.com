---
layout: post
title: epoll编程实例
wordpress_id: 1342
categories:
- 网络编程
tags:
- epoll
---

    #include "sys/types.h"
    #include "sys/socket.h"
    #include "netinet/in.h"
    #include "assert.h"
    #include "sys/epoll.h"
    #include "arpa/inet.h"
    #include "fcntl.h"
    #include "unistd.h"
    #include "stdio.h"
    #include "errno.h"
    #include "string.h"
    #include "stdlib.h"
    #include "pthread.h"
    
    #define MAX_EVENT_NUMBER 	1024
    #define BUFFER_SIZE 		10
    
    /*	设置套接字为非阻塞	    */
    int setnonblocking( int fd )
    {
    	int old_option = fcntl(fd, F_GETFL);
    	int new_option = old_option | O_NONBLOCK;
    	fcntl(fd, F_SETFL, new_option);
    	return old_option;
    }
    
    /*将fd的EPOLLIN事件加入到epoll中，参数enable_et用来控制是否使用ET模式*/
    void addfd(int epollfd, int fd, bool enable_et)
    {
    	epoll_event event;
    	event.data.fd 	= fd;
    	event.events	= EPOLLIN;
    	if(enable_et) {
    		event.events |= EPOLLET;
    	}
    
    	epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);
    	setnonblocking(fd);
    }
    /*	LT模式的处理方式	*/
    void lt(epoll_event* events, int number, int epollfd, int listenfd) 
    {
    	char buf[BUFFER_SIZE];
    	for (int i = 0; i < number; i++) {
    		int 	sockfd = events[i].data.fd;
    		if(sockfd == listenfd) {
    			struct sockaddr_in client_address;	
    			socklen_t client_addrlength = sizeof(client_address);
    			int connfd = accept(listenfd, (struct sockaddr*)&client_address, &client_addrlength);
    			addfd(epollfd, connfd, false);
    
    		} else if (events[i].events & EPOLLIN) {
    			/*只要socket中还有数据没有读取这段代码就触发*/
    			printf("event trigger once\n");		
    			memset(buf, 0, BUFFER_SIZE);
    			int ret = recv(sockfd, buf, BUFFER_SIZE - 1 , 0);
    			if ( ret <= 0) {
    				close(sockfd);
    				continue;
    			}
    			printf("get %d bytes of content: %s\n", ret, buf);
    
    		} else {
    			printf("something else happened\n");	
    
    		}
    	}
    }
    
    /*	ET模式的处理方式	*/
    void et (struct epoll_event* events, int number, int epollfd, int listenfd)
    {
    
            char buf[BUFFER_SIZE];
            for (int i = 0; i < number; i++) {
                    int     sockfd = events[i].data.fd;
                    if(sockfd == listenfd) {
                            struct sockaddr_in client_address;    
                            socklen_t client_addrlength = sizeof(client_address);
                            int connfd = accept(listenfd, (struct sockaddr*)&client_address, &client_addrlength);
                            addfd(epollfd, connfd, false);
    
                    } else if (events[i].events & EPOLLIN) {
    			printf("event trigger once\n");
    
    			while (1) {
    			memset(buf, 0, BUFFER_SIZE);
    			int ret = recv(sockfd, buf, BUFFER_SIZE - 1 , 0);
                            if ( ret < 0) {
                            /*errno为EAGAIN才表示读取完毕*/
    				if ((errno == EAGAIN) || (errno == EWOULDBLOCK)) {
    					printf("read later\n");
    					break;
    				}
    				close(sockfd);
    				break;
    
                            } else if (ret == 0) {
    				close(sockfd);
    
    			} else {
    				printf("get %d bytes of content: %s\n", ret, buf);	
    			}
    
    			}
    
    		} else {
    			printf("something else happened \n");		
    		}
    	}
    }
    
    int main(int argc, char** argv)
    {
    
        if (argc <= 2) {     
            printf("usage: %s ip_address port_number\n", basename(argv[0]));    
            return 1;     
        }    
        const char* ip = argv[1];     
        int port = atoi(argv[2]);     
        int ret = 0;    
        struct sockaddr_in	address;    
        bzero(&address, sizeof(address));     
        address.sin_family = AF_INET;     
        address.sin_port = htons(port);     
        inet_pton(AF_INET, ip, &address.sin_addr);     
        int listenfd = socket(AF_INET, SOCK_STREAM, 0);     
        assert(listenfd >= 0);
        /*	地址重用	*/
        int on = 1;
        if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) == -1) {
           perror("setsockopt error");
        }
    
        ret = bind(listenfd, (struct sockaddr*)&address, sizeof(address));
        assert(ret != -1);
    
        ret = listen(listenfd, 5);
        assert(ret != -1);
    
        epoll_event events[MAX_EVENT_NUMBER];
        int epollfd = epoll_create(5);
        assert(-1 != epollfd);
    //  addfd(epollfd, listenfd, true);    /*	开启et模式	*/
        addfd(epollfd, listenfd, false);   /*	不开启et模式	*/
    
        while(1) {
        int ret = epoll_wait(epollfd, events, MAX_EVENT_NUMBER, -1);
        if (ret < 0) {
            printf("epoll failure");
            break;
        }
    //  et(events, ret, epollfd, listenfd);    /*et模式的处理方式*/
        lt(events, ret, epollfd, listenfd);	   /*lt模式的处理方式*/
    
        }
        close(listenfd);
    
        return 0;
    }


总的来说不难，主要的工作流程同select类似:  

1. 建立socket  
2. bind绑定地址  
3. listen监听  
4. epoll_create建立epoll  
5. epoll_ctl将监听的sockfd加入epoll  
6. epoll_wait等待
* 当发生事件的是sockfd时候，表示有连接上来了，将连接上的描述符加入epoll中  
* 如果发生事件的不是sockfd时候，表示是客户端发送了数据，读取数据即可

#### 需要注意的是:

* 对于ET模式一定要一次性读完所有的数据，errno为EAGAIN才表示读取完毕
* 对于LT模式只要正常读取即可，因为假如有数据没有读取完毕，那么epoll_wait会一直通知你让你去读


