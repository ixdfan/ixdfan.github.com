---
layout: post
title: VIM常用命令
categories:
- TOOL
tags:
- vim
---

 ====================================================================================== 
    
      ctrl+f, ctrl+b 向下翻页，向上翻页     
      ctrl+d, ctrl+u 向下半翻页，向上半翻页 

  --------------------------------------------------------------------------------------------------------------------------- 

      dd 删除一行 
      cc,S 删除一行后进入insert模式 
      dw 删除一个单词 
      cw 删除一个单词后进入insert模式 
      x,dl 删除一个字符 
      s,cl 删除一个字符后进入insert模式 

---------------------------------------------------------------------------------------------------------

      p 粘贴 
      ]p 和p的功能差不多，但是它会自动调整被粘贴的文本的缩进去适应当前代码的位置 
      xp 交换两个字符 
      ddp 交换两行 

---------------------------------------------------------------------------------------------------------------------------

      j 跳到下一行 
      J 合并当前行与下一行 
      y 复制 
      yy 复制一行 
      u 撤消 

--------------------------------------------------------------------------------------------------------------------

	ctrl+r 重做 
      . 重复上一次修改 
      
 ---------------------------------------------------------------------------------------------------------------------------
 
      $ 移动行尾 
      0 移动行首 
 
--------------------------------------------------------------------------------------------------------------------------- 

      w 移动下一个词 
      b 移动到上一个词 
 
--------------------------------------------------------------------------------------------------------------------------- 
      gg 跳到文档的开始处 
      G 跳到文档的末尾 
      ^：移动光标到当前行的第一个字母位置 
      )：移动光标到下一个句子 
      ( ： 移动光标到上一个句子 
      {: 前移1段 
      }: 后移1段 
--------------------------------------------------------------------------------------------------------------------------- 

	  dd：剪切当前行。 
      yy：拷贝当前行。 
      cc：剪切当前行并且进入插入模式。 
      D：剪切从光标位置到行尾到剪贴板。 
      Y：拷贝当前行。 
      C：和D类似，最后进入插入模式。 
      x：剪切当前字符到剪贴板。 
      s：和x类似，不过最后进入插入模式。 
      \>>：缩进所有选择的代码 
--------------------------------------------------------------------------------------------------------------------------- 
      H：移动光标到屏幕上面 
      M：移动光标到屏幕中间 
      L：移动光标到屏幕下面 
      
--------------------------------------------------------------------------------------------------------------------------- 
      ctrl+r 重做 
      . 重复上一次修改 

====================================================================================== 
  
  % 跳到匹配的括号处（"{ }""[]""()"） 
  
  C 程序中经常包含类似下面的代码： 
      #ifdef USE_POPEN 
      fd = popen("ls", "r") 
      #else 
      fd = fopen("tmp", "w") 
      #endif 
  
  有时会更长，也许还有套嵌。将光标置于 "#ifdef" 处按 %。Vim 会跳转到"#else"。继 
  续按 % 会跳转到 "#endif"。再次按下 % 又回到原来的 "#ifdef"。
  
  当代码套嵌时，Vim 会找到相匹配的项目。这是检查你是否忘记了一个 "#endif" 的 
  好办法。 

====================================================================================== 

      ctrl+i,tab 跳到下一个jump point 
      ctrl+o 跳到上一个jump point 
      A "jump" is one of the following commands: "'", "`", "G", "/", "?", "n", 
      "N", "%", "(", ")", "[[", "]]", "{", "}", ":s", ":tag", "L", "M", "H" 
      23gg, 23G, :23 跳到第23行 
      ctrl+i, tab 跳到下一个跳点(Jump Point) 
      ctrl+o 跳到上一个跳点 
  
======================================================================================

  查找: 
  
      # 从光标向后查找整个关键词 
      * 从光标向前查找整个关键词 
      g# 从光标向后查找关键词 
      g* 从光标向前查找关键词 
      fx，tx，Fx，Tx 在当前行查找字符 
      fx：移动光标到当前行的下一个x处，x可以是任意一个字母，而且你可以使用';'来重复你的上一个f命令。 
      tx：和上面的命令类似，但是是移动到x的左边一个位置。 
      Fx：和fx类似，不过是往回找。 
  
======================================================================================
  
  替换： 
  
      : s/SEARCH/REPLACE 
      : s/If/Since 将下一个"If"换成"Since" 
      : %s/If/Since 将全部"If"换成"Since" 
      : 1,3 s/If/Since/g 只对1,3行有效,如无前缀,只对当前行有效 

======================================================================================

表达式: 

      . 代替一个字符 
      * 表示一个或多个字符的重复 
      /d.*an 可以匹配 dan, divan, debian 

====================================================================================== 
  单词边界: 
  
  指定单词边界: \ 
  
  如: /\d[a-z]+an 匹配以d开始,中间包含任意个小写字母,以an结束的单词 
  
  /\$[0-9]*\.[0-9][0-9] 匹配查找 $XX...X.XX这要的数字,有且只有两位小数的 

====================================================================================== 
  划分窗格: 
  
      :split/vsplit  分隔一个窗口 
      :new/vnew      创建一个新的窗口 
      :sf {filename} 在新窗口中打开filename 
      :close         关闭当前窗口 
      : only         关闭除当前窗口外所有窗口 
      :ctrl-w h      到左面的窗口 
      :ctrl-w j      到下面的窗口 
      :ctrl-w k      到上面的窗口 
      :ctrl-w l      到右面的窗口 
      :ctrl-w t      到顶部的窗口 
      :ctrl-w b      到底部的窗口 

====================================================================================== 
  宏操作 
  
      q[a-z] 开始记录操作,记录到寄存器[a-z]中 
      q 停止记录操作 
      @[a-z] 执行寄存器中的操作 
      @@ 执行最近寄存器中记录的操作 

 例子： 一个缓冲区有两行：
 
      <sys/types.h> 
      <stdio.h> 
  要改为： 
  
      ＃include <sys/types.h> 
      ＃include <stdio.h> 

 操作如下： 
 
      qa #开始记录 
      ^ #移动行首 
      i #进入insert模式 
      ＃i nclude #输入内容 
      q #停止记录 
      移动另一行： 
      @a即可执行相同的操作 

====================================================================================== 
    
Visual Mode操作: 

ctrl+v 进入基于块的可视模式 

v 进入基于字符的可视模式 

V 进入基于行的可视模式 

c 删除选定的块 

I{string} 选定块后按大写的I，输入字符串，再按ESC，可以在块内每一行插入相同的内容 

：按块选择。非常强大，只在很少的编辑器中才有这样的功能。你可以选择一个矩形块，并且在这个矩形里面的文本会被高亮。 


一旦你高亮了选区，你或许想进行一些操作： 

d：剪贴选择的内容到剪贴板。 

y：拷贝选择的内容到剪贴板。 

c：剪贴选择的内容到剪贴板并且进入插入模式。 

====================================================================================== 

     跳到声明处: 
      [[ 向前跳到顶格的第一个"{" 
      [] 向前跳到顶格的第一个"}" 
      ][ 向后跳到顶格的第一个"{" 
      ]] 向后跳到顶格的第一个"}" 
      [{ 跳到本代码块(由{}界定)的开头 
      [} 跳到本代码块的结尾 
      [/ 移动到一个注释的开始用 
      ]/ 向前移动到注释的结尾用 注意：这只对 /* - */ 注释 

====================================================================================== 

Shell: 

* :ctrl+z/suspend 在shell下是挂起vim; gui下是最小化窗口 
* :!{command} 执行shell命令 
* :shell 开一个新的shell 

保存vim状态(挂起)： 
* :mksession session.vim 保存当前vim状态 
* :source session.vim 回复vim状态 
* vim -S session.vim 启动vim时恢复session 

====================================================================================== 

  /text：从当前光标处开始搜索字符串text，并且到达text出现的地方。必须使用回车来开始这个搜索命令。如果想重复上次的搜索的话，按n。 
  
  ？text：和上面类似，但是是反方向。 
  
  ma 在当前光标的位置标记一个书签，名字为a。书签名只能是小写字母(a-z)。你看不见书签的存在，但它确实已经在那里了。 
  
  `a 到书签a处。注意这个不是单引号，它一般位于大部分键盘的1的左边。 
  
  `. 到你上次编辑文件的地方，不用自己去标记它 

 ' 跳转前的光标位置 
 
  " 最后编辑的光标位置 
  
  [ 最后修改的开始位置 
  
  ] 最后修改的结束位置 
  
  当你用 "G" 命令跳到另一个地方，这个位置成为一个标记，要回到原来的地方，使用如下命令：``两个字符 
 
====================================================================================== 

很多编辑器都只提供了一个剪贴板。VIM有很多。剪贴板在VIM里面被称为寄存器（Registers）。你可以列出当前定义的所有寄存器名和它们的内容，命令为":reg"。 

  使用寄存器的命令为双引号"。 
  
  比如：我们要拷贝当前行到寄存器k。你应该按 "kyy。（你也可以使用 V"ky。为什么这样也可以呢？）现在当前行应该已经存在了寄存器k里面直到你又拷贝了一些东西进入寄存器k。现在你可以使用命令 "kp 来粘贴寄存器k里面的内容到你想要的位置。 
  
  ====================================================================================== 

      y3" 将会拷贝从当前光标到第三个出现的引号之间的内容到剪贴板。 
 
 ====================================================================================== 
