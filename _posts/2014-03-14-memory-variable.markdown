---
layout: post

title: 各种变量在程序内存中的分布

categories: 
-

tags: 
-
---

##### 程序的内存分布:
1. 栈区(stack)：由编译器自动分配释放，存放函数的参数值，局部变量的值；
2. 堆区(heap): 一般由程序员分配和释放，如果程序员不释放，程序结束时由OS回收；
3. 全局区(静态区static): 全局变量和静态变量的存储时放在一起的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序接收后系统释放
4. 文字常量: 常量字符串就在这里
5. 程序代码区: 存放函数体的二进制代码


```
        ----------------------- 内存低端
        |      程序段   |
        -----------------
        |      数据段   |
        -----------------
        |      堆栈     |
        ----------------------- 内存高端
```

一个正常的程序在内存中通常分为程序段、数据段
堆栈三部分；

程序段放着程序的机器码和只读数据，这个段通常是只读的，写操作是非法的！

数据端倪放的是程序中的静态数据；

动态数据则通过堆栈来存放

堆栈式内存中的一个连续的块，一个叫堆栈指针的寄存器SP指向堆栈的栈顶。堆栈的底部是一个固定地址！

堆栈的特点:**后进先出**

它支持两个操作:push和pop

push试讲数据放到栈顶；pop是从栈顶取走数据



##### 全局变量、静态数据、常量存放在全局数据区

##### 所有函数的代码存放在代码区,假如机器中有数个进程运行相同的程序，他们就可以使用同一个代码段；

##### 为运行函数而分配的局部变量、函数参数、返回数据、返回地址等存放在栈区。

所以在同一个进程里，多个任务（线程）的全局变量和静态变量都应该是共享同一块内存(全局数据区);

而在不同的进程里，重新加载了代码，各个进程间的全局变量和静态变量当然不是拥有同一块内存;

在psos下，各个任务是不同的线程，所以各个任务的全局变量和静态变量是在同一块内存。

而我的另一个程序中（在sco unix），是每次运行都是一个新的进程，所以各个进程的全局变量和静态变量拥有不同的内存

堆栈段包括在进程控制块PCB中。PCB处于核心堆栈的底部，不需要额外分配空间。


