---
layout: post
title:  linux中的信号
description: 
modified: 
categories: 
- THE LINUX 
tags:
- signal

---

Linux的信号可以由一下条件产生:
* 对于前台进程，用户可以通过输入特殊字符来给它发送信号，例如Ctrl+C通常会给进程发送一个中断信号;

* 系统异常，例如浮点异常和非法内存段访问;

* 系统状态变化，比如alarm定时器到期将引起SIGALRM信号;

* 与性kill命令或调用kill函数

服务器必须处理(至少忽略)一些常见当信号，以免异常终止;

一个进程给其他进程发送信号的是kill函数:
	
	#include <sys/types.h>
	#include <signal.h>
	int kill(pid_t pid, int sig);


kill函数将信号sig发送给pid进程


	-------------------------------------------------------------------------
	|pid>0	|信号发送给PID为pid当进程					|	
	-------------------------------------------------------------------------
	|pid=0	|信号发送给本进程组内其他进程					|	
	-------------------------------------------------------------------------
	|pid=-1	|信号发送给除init进程意外的所有进程，不过要对目标进程有权限	|	
	-------------------------------------------------------------------------
	|pid<-1	|信号发送给组ID为-pid的进程组中所有成员				|	
	-------------------------------------------------------------------------

##### 注意:
Linux的信号值都大于0,如果sig为0,则kill不发送任何信号，但是将sig设置为0可以用来检测目标进程或者进程组是否存在，因为检查工作总是在发送信号之前就执行。

函数成功则返回0,失败则返回-1并设置errno;

errno可能值为:


	-------------------------------------------------
	|EINVAL	| 无效信号				|
	-------------------------------------------------
	|EPERM	| 该进程没有权限发送信号给任何一个进程	|
	-------------------------------------------------
	|ESRCH	| 目标进程或者进程组不存在		|
	-------------------------------------------------



信号处理函数的原型

	typedef void (*__sighandler_t) (int);

信号处理函数只能带一个整形参数,该参数用来指示信号类型;

除了用户自定义信号处理函数以外，还有两种其他信号处理方式:**SIG_IGN**和**SIG_DEL**;

* SIG_IGN表示忽略目标;
* SIG_DEL表示使用信号;

信号当默认处理方式有以下几种:

* 结束进程(Term)
* 忽略信号(Ign)
* 结束进程并生成核心转储文件(Core)
* 暂停进程(Stop)
* 继续进程(Cont)



