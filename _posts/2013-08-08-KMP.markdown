---
layout: post
title: KMP匹配算法小结
categories:
- ALGORITHM
tags:
- KMP
---

经过两天的努力，我终于搞懂了KMP算法的代码！
KMP算法核心：KMP算法借助于一个辅助数组next来确定当匹配过程中出现不等时，模式P右移的位置和开始比较的位置。
next[i]的取值只与模式P本身的前i+1项有关，而与主串T无关。
匹配过程中遇到Pi不等于Tj时，若next[i]>=0，则应将P右移i-next[i]位个字符，用P中的第next[i]个字符与Tj 进行比较；
若：next[i]= -1，P中的任何字符都不必再与Tj比较，而应将P右移i+1个字符，从P0和Tj+1从新开始下一轮比较

==================================================================================

next的计算：以P = " 01001010100001"为例。
    
    i :        0 1 2 3 4 5 6 .....
    P :        0 1 0 0 1 0 1 .....
    next:     -1 0 0 1 1 2 3 .....

==================================================================================

next[0]要以-1开始
next[1]包含字符就是‘0’，所以没有与他相同的字符，所以next[1] = 0；
next[2]包含字符为'0 1',都不相同所以next[2] = 0;
next[3]包含字符为'0 1 0',只有前缀0与后缀0一个字符相同，所以next[3] = 1;
……

    
    #include <stdio.h>
    #include <string.h>
    #include <stlib.h>
    char s1[200],s2[200];
    int next[200];
    int max(int a,int b)
    {
        if(a>b) return a;
        return b;
    }
    void getnext()
    {
        memset(next,0,sizeof(next));
        //i代表前缀的下标
        int i=-1;
        //j代表的是后缀的下标
        unsigned int j=0;
        next[0]=-1;
        while(j<strlen(s2)-1)
        {
            if(i==-1||s2[i]==s2[j])
             {
                //代表的含义是当s[i]与s[j]相等的时候
                //则i++表示与前缀匹配的个数，并且即将要去判断下一个是否匹配
                //j++表示的是将要判断后缀的下一个字符是否相等
                //同时应该将下一个字符对应的next填写上去，表示前面所匹配的
                i++; 
                j++;  
                next[j]=i;
             }
               else
                //若果不相等，则i要变为对应的next[i]所指的位置上去重新判断
                i=next[i];
        }
    }
    int KMP()
    {
        int i=0;//主串的下标
        int j=0;//子串的下标
        int len1=strlen(s1);
        int len2=strlen(s2);
        while((i<len1)&&(j<len2))
        {
            if(j==-1||s1[i]==s2[j]) 
            {
                j++;
                i++;
            }
            else
                j=next[j];
        }
        if(j==len2) 
            return i-len2;
        else
            return -1;
    }
    int index_KMP()
    {
        int i=0;
        int j=0;
        int len1=strlen(s1);
        int len2=strlen(s2);
        int re=0;
    
        while(i<len1&&j<len2)
        {
            if(j==-1||s1[i]==s2[j])
             {
                 i++;
                 j++;
             }
            else
                 j=next[j];
             re=max(re,j);
        }
        return re;
    }
    int main()
    {
        scanf("%s",s1);
        scanf("%s",s2);
        getnext();
        printf("%d %d\n",KMP(),index_KMP());
        return 0;
    }


===================================================================

主要写一下get_next实现过程

    i       0   1   2   3   4
    S       a   b   a   b   c
    next    -1  0   0   1   2

===================================================================

    strlen(s) = 5;
    j < 5-1;
    
---------------------------------------------------------------------------------------------
    j==0<4; i ==-1; i++(i==0); j++(j==1); next[1] = 0;
    
    j==1<4; s[1] !=s[0]; i = next[0] == -1; //不相等则要跳到next中对应的下标的位置
    
    j==1<4; i == -1 i++(i==0); j++(j==2); next[2] = 0;
    
    j==2<4; s[0]==s[2]; i++(i==1); j++(j==3); next[3] = 1;
    
    j==3<4; s[1] == s[3]; i++(i==2); j++(j==4); next[4] = 2;
    
    j==4退出循环
---------------------------------------------------------------------------------------------

	 	 	 	
