---
author: UCSHELL
comments: true
date: 2013-11-26 07:25:42+00:00
layout: post
slug: '%e5%90%8e%e7%bc%80%e8%a1%a8%e8%be%be%e5%bc%8f'
title: 后缀表达式
wordpress_id: 1094
categories:
- THE ALGORITHM
---

后缀表达式

我们将平日中所用的标准四则运算表达式例如"9＋(3 -1*3+10/2"称为中缀表达式，因为所有运算符号都在两数字的后面写成后缀表达式应该表示为:

	"9 3 1 - 3 * + 10 2 / +"

这样的表达式成为后缀表达式，叫做后缀表达式的原因在于所有的符号都是在要运算数字的后面出现。

后缀表达式： 9 3 1 - 3 * + 10 2 / +

##### 规则：

** 从左到右遍历表达式的每一个数字和符号，遇到数字就进栈，遇到符号就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到获得最终结果。**

1. 初始化一个空栈，此栈要用来对运算的数字进行使用。
2. 后缀表达式中前三个都是数字，所以9、3、1进栈
3. 接下来是"-"，所以栈中的1出栈作为减数，3作为出栈的被减数，并运算3-1得到2，在讲2进栈。
4. 接着是数字3进栈
5. 后面是"*"，所以栈中3和2出栈，2与3相乘，得到6，将6进栈
6. 然后是"+",所以6和9出栈，9与6相加，得到15,15进栈
7. 接着10与2进栈
8. 遇到符号"/"，栈顶的2与10出栈，计算10 / 2得到5，将5进栈
9. 最后一个符号是"+"，将15与5出栈并相加，得到20，将20进栈
10. 结果为20出栈，栈变为空。

![数字](/uploads/2013/11/数字-273x300.png

后缀表达式如何推倒：

中缀表达式9+(3-1*3+10/2转换为后缀表达式

规则：

**从左到右遍历中缀表达式的每个数字和符号，如实数字就输出，成为后缀表达式的一部分；**

** 若是符号则判断其与栈顶符号的优先级，是左括号或优先级低于栈顶符号则栈中元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。**

1. 初始化空栈，用来对符号进出栈使用。
2. 第一个数字是9，输出9，后面符号"+"进栈。
3. 第三个字符是"(",依然是符号，因为其只是做括号，还未配对，所以进栈。
4. 第四个字符时3，输出，表达式为9 3，接着"-"进栈
5. 接着是数字1，输出，表达式为9 3 1，后面是符号"",此时我们需要去配对之前的"(",所以一次出栈，并输出，知道"("出栈为止，
此时"("前只有符号"-", 因此输出"-"，总表达式为9 3 1 -。
6. 接着是数字3，输出，总表达式为9 3 1 - 3，接着是符号"*"进栈，此时栈顶符号为"+"，优先级低于"*"，所以不输出，"*"进栈
7. 之后符号"+",此时当前栈顶元素"*"比"+"优先级高，因此栈中元素出栈并输(没有比加号更低的优先级，所以全部出栈，输出表达式为9 3 1 - 3 * +，将当前的"+"进栈，这个"+"不是原来在栈低的那个加号了，而是9+(3-1*3+中的"+"
8. 接着数字10，表达式为9 3 1 - 3 * + 10。后面的符号"/"进栈
9. 最后是数字2，输出总的表达式为9 3 1 - 3 * + 10 2
10. 因为已经达到最后，所以栈中符号全部出栈并输出，最终输出后缀表达式结果为9 3 1 - 3 * + 10 2 / +;

![符号](/uploads/2013/11/符号-286x300.jpg)
