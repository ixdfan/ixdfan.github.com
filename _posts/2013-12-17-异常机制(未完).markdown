---
author: UCSHELL
comments: true
date: 2013-12-17 04:02:39+00:00
layout: post
slug: '%e5%bc%82%e5%b8%b8%e6%9c%ba%e5%88%b6%e6%9c%aa%e5%ae%8c'
title: 异常机制(未完)
wordpress_id: 1260
categories:
- THE C/C++
tags:
- 异常
---

异常(exception)：**异常是指不会经常发生，但是很难避免的(是预料之中)**；

比如老师上课突然脖子疼，这个可以预料，因为脖子疼不是不可能发生的事情，所以可以预料，但是难以避免。

比如上班不会经常迟到，但是也会有迟到！不会经常发生，但是不可避免；

异常的处理：**异常发生后要去处理，而不是去避免发生**；

程序中发生了异常就要将异常传递出来，就要使用**throw+数据**传递，这个数据可以是任意类型的数据来表达异常信息；

在**自己扔的时候最好写个exception类的子对象，将子对象作为数据扔出去**

监视是否有异常扔出，称为try块，把可能扔出的用try块包围，后面跟一个catch块来接住；

每个try后可以接多个catch块，每个catch只接受一个类型的对象数据；

每个catch中都有一个形参用于接受相应类型的throw数据，成为异常形参；

**异常声明**：如果一个函数可能抛出异常那么可以应该为他添加说明，说明他可能会抛出哪些异常类型；

比如main中可能会抛出异常，那么就要添加说明

    
    int main() throw(double, int, const char**, MyTyep, MyException)


说明这个函数可能抛出这些类型的异常叫做异常声明；

    
    int main() throw()	//说明不会抛出异常

    
    class MyType
    {
    };
    class MyExcption : public exception 
    {
    publc:
    	const char* what() const throw()
    	{return "MyException";}
    };
    int main() throw(int, MyType, MyException, const char*)
    {
    	throw MyException();
            throw MyType;	//错误，因为异常仅仅能抛出数据，而MyType是一个类而不是数据
            throw MyType();
    	throw 123;	//int
    	throw "hello";	//const char*
    
            return 0;
    }


<!-- more -->

输出的结果

    
    [root@localhost Ex]# ./main
    terminate called after throwing an instance of 'MyException'
      what():  MyException
    Aborted (core dumped)


可以看到只要继承了exception的what函数就会被调用，我们便可以显示异常的情况！

exception的代码

    
    class exception
    {
    public:
    exception() throw() { }
    virtual ~exception() throw();	//表示不会抛出异常
    
    /** Returns a C-style character string describing the general cause
    *  of the current error.  */
    virtual const char* what() const throw();
    //表示不会抛出异常，what是个虚函数，最后一个const表示他不会修改子类的数据。
    };
