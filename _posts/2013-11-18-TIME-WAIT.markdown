---
author: UCSHELL
comments: true
date: 2013-11-18 12:26:52+00:00
layout: post
slug: time-wait%e7%9a%84%e4%bd%9c%e7%94%a8
title: TIME-WAIT的作用
wordpress_id: 1047
categories:
- 网络编程
tags:
- TIME-WAIT
---

TIME-WAIT的作用是什么？(或为什么A在TIME-WAIT状态要等待2MSL的时间呢？)

TIME-WAIT状态又称为2MSL状态，MSL叫做最长报文段寿命，它是任何报文段被丢弃前在网络内的最长时间。2MSL也就是MSL的两倍。

原因有两个：

====================================================================================================

(1).**保证A发送的最后一个ACK报文段能够到达B**。也就是可靠的终止TCP连接，这个ACK报文段有可能丢失，因而使处于LAST-ACK状态的B收不到A对之前发送的FIN+ACK的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到CLOSED状态。如果A在TIME-WAIT状态不等待一段时间，而是在发送完ACK报文段后便立即释放连接，那么就无法收到B重传的FIN+ACK报文段，也就不会再次发送确认，因此B就无法按照正常的步骤进入到CLOSED状态。

(2).**防止"已失效的连接请求报文段"出现在本连接中**，A在发送完最后一个ACK报文段后，在经过时间2MSL，就可以使本链接持续的时间内产生的所有报文段都从网络中消失(最后一个报文的存活时间不过才MSL)。这样就可以在下一个新的连接中不会出现这种旧的连接请求报文。

假设在A的10端口与B的20端口之间有一个TCP连接，我们关闭这个链接。

过一段时间后再次为A的10端口与B的20端口建立连接。因为它们的IP地址和端口号与之前都相同，如果断开前的A发送的数据包在网络中滞留到了第二次连接的时候，B就会认为这是A新发送的数据，那么后果会是什么样子呢？

TCP必须防止旧的请求连接报文在连接已经终止后再出现，从而被误解成属于新连接的连接请求报文。

为做到这一点，TCP将不允许处于TIME_WAIT状态的链接发起新的连接(与之前连接完全相同的连接)。既然TIME_WAIT状态的持续时间是MSL的2倍，这就足以让旧的连接请求消亡。通过实施这个规则，我们就能保证每成功建立一个TCP连接时，不会有旧的连接请求报文出现。

TCP必须防止来自旧的连接请求报文在连接已经终止后再现，从而被误解成属于新的连接的数据。

为做到这一点，TCP将不允许为处于TIME_WAIT状态的进程建立新的连接。既然TIME_WAIT状态的持续时间是MSL的2倍，而报文的最长存活时间为MSL，所以一定会消失。通过实施这个规则，我们就能保证每成功建立一个TCP连接时。来自该链接先前化身的重复分组都已经在网络中消逝了。

总结一下：
**TIME_WAIT状态的作用就是用来可靠地实现TCP全双工连接的终止（重发可能丢失的ACK报文），保证在下一个新的连接中不会出现旧的连接请求报文。**

====================================================================================================

B只要收到了A发出的确认，就进入CLOSED状态，同样B在撤销相应的传输控制块TCB后，就结束了这次TCP连接。所以B结束TCP连接的时间比A要早一些。

TIME_WAIT状态所带来的影响：

当某个连接的一端处于TIME_WAIT状态时，该连接将不能被使用。某个端口处于TIME_WAIT状态(其实应该是这个连接)时，这意味着这个TCP连接并没有断开(完全断开)，那么，如果你bind这个端口，就会失败。

如果我们强制关闭服务器端，那么它将无法再2MSL内重新启动，因为bind会失败。

解决这个问题的一个方法就是设置socket的SOL_SOCK的SO_REUSEADDR选项。

====================================================================================================
参考 《[TCP三次握手与四次挥手](http://ucshell.com/archives/1039)》
