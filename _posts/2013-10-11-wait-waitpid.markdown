---
layout: post
title: wait与waitpid函数
categories:
- LINUX
---

wait与waitpid函数


    pid_t wait(int *status);
    pid_t waitpid(pid_t pid, int *status, int options);

返回的都是结束的子进程的ID,如果错误,返回-1

=========================================================================

当一个进程正常或异常终止时，内核就像其父进程发送SIGCHLD信号。

因为子进程终止是个异步(可以在父进程运行的任何时候发生)，所以信号是内核向父进程发送的异步通知。

=========================================================================

##### 调用wait或waitpid进程可能发生的情况：

1. 如果所有子进程都还在运行，则阻塞
2. 如果一个子进程已终止，等待父进程获取其状态，则取得该孩子进程的终止状态并立刻返回
3. 如果他没有任何子进程则立即出错返回；

=========================================================================

	int main(int argc, char** argv)
	{
		int i = 0;
		int sum = 0;
		for (i; i < 10; i++) {		
			sum += i;
		}
	
		int stat;
		//int pid = waitpid(-1, &stat, 0);
		int pid = wait(&stat);
		if (pid == -1) {
			perror("error");		
			exit(-1);
		}
	
		return 0;
	}

##### 第三条要根据返回值来判断时候出错！

=========================================================================

wait与waitpid的区别：

在一个子进程种植前，wait使其调用者阻塞，waitpid中有一个选项，可以是调用者不阻塞，程序中有多个子进程时，任意一个子进程结束则wait就立刻返回状态，waitpid并不等待在其调用之后的第一个终止子进程，而是等待指定的进程

* pid > 0 等待进程ID与pid相当的子进程

* pid == 0 等待其组ID等于调用进程组ID的任意子进程

* pid < -1 等待其组ID等于pid绝对值的任意子进程

=========================================================================
