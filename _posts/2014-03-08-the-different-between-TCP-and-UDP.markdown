---
layout: post
title: TCP与UDP协议
tags: [TCP,UDP]
---
TCP相对与UDP的特点是:  
* 面向连接   
* 字节流  
* 可靠传输  
* 全双工
* 点对点


# TCP服务的特点

#### 面向连接的运输层协议
* 使用TCP协议通信的双方必须先建立连接，然后才能开始数据的读写，双方都必须为该连接分配必要的内核资源，用来管理连接的状态和连接上的数据传输。  

#### TCP提供全双工通信
* TCP连接是全双工的，也就是*通信双方的读写可以通过一个连接进行*，完成数据交换后，通信双方必须断开连接释放系统资源。  

#### TCP连接是点对点的
* TCP协议是一对一的，所以基于广播和多播(目标地址是多个主机地址)的应用程序不能使用TCP服务，而无连接的UDP则非常的适合广播和多播。  

#### 字节流  
* 当发送端应用程序连续执行多次写操作时，TCP模块先将这些数据放入TCP发送缓冲区中，当TCP模块开始发送数据的时候，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。所以TCP模块发送的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的关系。  
* 当接受端受到一个或多个TCP报文段后，TCP模块将他们携带的应用程序数据按照TCP报文段的序号一次放入TCP接受缓冲区中，并通知应用程序读取数据。接收端可以一次性将TCP接收缓冲区中数据全部读取，也可以分多次读取，这取决与用户指定的接受端读缓冲的大小。*因此程序执行读操作次数和接受端接受到的TCP报文端个数之间没有固定的数量关系，应用程序对数据的发送和接受是没有边界限制的*
* UDP中发送端没执行一次写操作，UDP模块就将其封装为一个UDP数据报并发送，接受端必须及时针对每一个UDP数据执行读操作，否则就会丢包(发生在较慢的服务器上),并且如果用户没有制定足够的应用程序缓冲来读取UDP数据，则UDP数据将会被截断  
发送端执行写操作次数和接受端执行的读操作次数之间没有任何数量关系，这就是字节流

#### 可靠传输  
* TCP协议采用发送应答机制，即发送端发送的每个TCP报文段都必须得到接收方的应答，才会认为这个TCP报文段传输成功  
* TCP协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时器时间内没有收到应答，他将重发该报文段
* 因为TCP报文段最终是以IP数据报发送的，而IP数据报到达接受端可能乱序、重复，所以TCP协议还会对接收到的TCP报文段重排、整理，再提交给应用层。

##### 注意:
TCP点对点中端点是指套接字(socket)

