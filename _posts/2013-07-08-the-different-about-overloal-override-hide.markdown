---
author: UCSHELL
comments: true
date: 2013-07-08 02:30:00+00:00
layout: post
slug: '%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0%e7%9a%84%e9%87%8d%e8%bd%bd%e3%80%81%e8%a6%86%e7%9b%96%e3%80%81%e9%9a%90%e8%97%8f'
title: 成员函数的重载、覆盖、隐藏
wordpress_id: 131
categories:
- C\C++
tags:
- 多态
- 覆盖
- 重载
- 隐藏
---

一直对成员函数的重载、覆盖、隐藏 的概念补太清楚， 今天总结了一下， 主要是一下几点


 
##### 重载的特征:
1. 发生在**相同的作用域**范围内(同一个类中);  
2. **函数名相同**;  
3. **参数不同**(个数不同、顺序不同、类型不同、全都不同);  
4. 关键字virtual可有可无;  
 

##### 覆盖(虚覆盖):又名重写 

是指派生类函数覆盖基类中的同名成员函数，可以记忆为**虚覆盖**，**有虚才有覆盖**。这也是多态的表现形式；  

覆盖指的是用**基类对象**的**指针**或者**引用**时访问虚拟函数的时候会根据实际的类型决定所调用的函数,因此此时派生类的成员函数可以"覆盖"掉基类的成员函数.  
**覆盖只有类对象指针或者引用的时候才能使用**。

##### 覆盖的特征:
1. 发生在**不同的范围**(分别位于派生类和基类中);
2. **函数名相同**;
3. **参数完全相同**(个数相同、顺序相同、类型相同);
4. 基类的同名成员函数**必须**有关键字virtual修饰;
   

##### 隐藏:

是指派生类的成员函数屏蔽了其基类中的同名成员函数,隐藏的一般都是普通函数  
隐藏一词可以这么理解:  
在调用一个类的成员函数的时候,编译器会沿着类的继承链逐级的向上查找函数的定义,如果找到了那么就停止查找了,所以如果一个派生类和一个基类都有同一个同名(暂且不论参数是否相同)的函数,而编译器最终选择了在派生类中的函数,那么我们就说这个派生类的成员函数"隐藏"了基类的成员函数,也就是说它阻止了编译器继续向上查找函数的定义....

##### 隐藏的特征是:
1. 发生在**不同范围**(分别位于派生类和基类中);
2. 如果派生类中的成员函数与基类中的成员函数同名,但是参数不同,此时,不论有没有virtual关键字修饰,基类中的同名成员函数都被隐藏;
3. 如果派生类中的成员函数与基类中的成员函数同名,并且参数也相同,但是基类中的同名成员函数没有关键字virtual修饰,则基类中的同名成员函数都被隐藏;
 

隐藏和覆盖的区别,他们都是发生在基类和派生类之中的，但最为**重要的区别**就是:  
**覆盖的函数是多态的**,是存在于虚表(vltb)之中的函数才能构成"覆盖"的关系  
**隐藏的函数都是一般的函数**,不支持多态,在编译阶段就已经确定下来了.
   
例如:

    
	    class A 
	    { 
	    public: 
		int process();                     //p1 
		int process(int);                  //p2 
		int process(char);                 //p3;这三个函数属于重载,发生在同一个类中; 
		virtual int work(char,int,long);   //w1 
		[virtual] int send(int,int,char);  //s1,也可以加上关键字virtual进行修饰; 
		int recv(char,int,int);	           //r1 
	    };
	    
	    class B: public A 
	    { 
	    public: 
		virtual int work(char,int,long);      //w2;与基类A中w1对应的同名成员函数work()之间是覆盖/重写关系,发生在不同类中,范围不同; 
		[virtual] int send(int,int,char,int); //s2;与基类A中s1对应的同名成员函数send()之间是隐藏关系,发生在不同类中,范围不同; 
		int recv(char,int,int);               //r2;与基类A中r1对应的同名成员函数recv()之间是隐藏关系,发生在不同类中,范围不同; 
	    };


