---
layout: post
title: SQL的执行顺序
categories:
- MYSQL
tags:
- SQL顺序
---

最近在学Oracle数据库编程，心理一直想着之前看过的一篇的笔试题中的SQL语句的执行顺序问题
今天又翻出来看了一下，从找了资料整理如下：

============================================================

一、sql语句的执行步骤：
1. 语法分析，分析语句的语法是否符合规范，衡量语句中各表达式的意义。
2. 语义分析，检查语句中涉及的所有数据库对象是否存在，且用户有相应的权限。
3. 视图转换，将涉及视图的查询语句转换为相应的对基表查询语句。
4. 表达式转换， 将复杂的 SQL 表达式转换为较简单的等效连接表达式。
5. 选择优化器，不同的优化器一般产生不同的“执行计划”
6. 选择连接方式， ORACLE 有三种连接方式，对多表连接 ORACLE 可选择适当的连接方式。
7. 选择连接顺序， 对多表连接 ORACLE 选择哪一对表先连接，选择这两表中哪个表做为源数据表。
8. 选择数据的搜索路径，根据以上条件选择合适的数据搜索路径，如是选用全表搜索还是利用索引或是其他的方式。
9. 运行“执行计划”

============================================================

二、oracle 共享原理：

ORACLE将执行过的SQL语句存放在内存的共享池(shared buffer pool)中，可以被所有的数据库用户共享 当你执行一个SQL语句(有时被称为一个游标)时,如果它和之前的执行过的语句完全相同, ORACLE就能很快获得已经被解析的语句以及最好的 执行路径. 这个功能大大地提高了SQL的执行性能并节省了内存的使用

============================================================

三、oracle 语句提高查询效率的方法：

1： where column in(select * from ... where ...);
2：... where exists (select 'X' from ...where ...);

* 第二种格式要远比第一种格式的效率高。在Oracle中可以几乎将所有的IN操作符子查询改写为使用EXISTS的子查询，使用EXIST，Oracle系统会首先检查主查询，然后运行子查询直到它找到第一个匹配项，这就节省了时间。
* Oracle系统在执行IN子查询时，首先执行子查询，并将获得的结果列表存放在在一个加了索引的临时表中
* 避免使用HAVING子句, HAVING 只会在检索出所有记录之后才对结果集进行过滤. 这个处理需要排序,总计等操作。如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销！

============================================================

查询的逻辑执行顺序
1. FROM left_table
2. ON join_condition
3. join_type JOIN right_table
4. WHERE where_condition
5. GROUP BY group_by_list
6. WITH {cube | rollup}
7. HAVING having_condition
8. SELECT
9. DISTINCT
10. ORDER BY order_by_list
11. top_specification select_list

============================================================

标准的 SQL 的解析顺序为:
1. FROM 子句 组装来自不同数据源的数据
2. WHERE 子句 基于指定的条件对记录进行筛选
3. GROUP BY 子句 将数据划分为多个分组
4. 使用聚合函数进行计算
5. 使用HAVING子句筛选分组
6. 计算所有的表达式
7. 使用ORDER BY对结果集进行排序

============================================================

执行顺序
* 第一步：首先对from子句中的前两个表执行一个笛卡尔乘积，此时生成虚拟表 vt1（选择相对小的表做基础表）

* 第二步：接下来便是应用on筛选器，on 中的逻辑表达式将应用到 vt1 中的各个行。
筛选出满足on逻辑表达式的行，生成虚拟表 vt2

* 第三步：如果是outer join 那么这一步就将添加外部行，left outer jion 就把左表在第二步中过滤的添加进来。
如果是right outer join 那么就将右表在第二步中过滤掉的行添加进来，这样生成虚拟表 vt3

* 第四步：如果 from 子句中的表数目多余两个表，那么就将vt3和第三个表连接从而计算笛卡尔乘积，生成虚拟表。该过程就是一个重复1-3的步骤，最终得到一个新的虚拟表 vt3。

* 第五步：应用where筛选器，对上一步生产的虚拟表引用where筛选器，生成虚拟表vt4
在这有个比较重要的细节不得不说一下，对于包含outer join子句的查询，就有一个让人感到困惑的问题，到底在on筛选器还是用where筛选器指定逻辑表达式呢？on和where的最大区别在于，如果在on应用逻辑表达式那么在第三步outer join中还可以把移除的行再次添加回来，而where的移除的最终的。举个简单的例子，有一个学生表（班级,姓名）和一个成绩表(姓名,成绩)，我现在需要返回一个x班级的全体同学的成绩，但是这个班级有几个学生缺考，也就是说在成绩表中没有记录。为了得到我们预期的结果我们就需要在on子句指定学生和成绩表的关系（学生.姓名=成绩.姓名）那么我们是否发现在执行第二步的时候，对于没有参加考试的学生记录就不会出现在vt2中，因为他们被on的逻辑表达式过滤掉了,但是我们用left outer join就可以把左表（学生）中没有参加考试的学生找回来，因为我们想返回的是x班级的所有学生，如果在on中应用学生.班级='x'的话，那么在left outer join 中就会将不会把x班级的学生的所有记录找回来，所以只能在where筛选器中应用学生.班级='x' 因为它的过滤是最终的。

* 第六步：group by 子句将中的唯一的值组合成为一组，得到虚拟表vt5。
如果应用了group by，那么后面的所有步骤都只能得到的vt5的列或者是聚合函数（count、sum、avg等）。原因在于最终的结果集中只为每个组包含一行。这一点请牢记。

* 第七步：应用cube或者rollup选项，为vt5生成超组，生成vt6.

* 第八步：应用having筛选器，生成vt7。having筛选器是第一个也是为唯一一个应用到已分组数据的筛选器。

* 第九步：处理select列表。将vt7中的在select中出现的列筛选出来，生成vt8.

* 第十步：应用distinct子句，vt8中移除相同的行，生成vt9。事实上如果应用了group by子句那么distinct是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。

* 第十一步：应用order by子句。
按照order_by_condition排序vt9，此时返回的一个游标，而不是虚拟表。sql是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。对表进行排序的查询可以返回一个对象，这个对象包含特定的物理顺序的逻辑组织。这个对象就叫游标。正因为返回值是游标，那么使用order by 子句查询不能应用于表表达式。排序是很需要成本的，除非你必须要排序，否则最好不要指定order by，最后，在这一步中是第一个也是唯一一个可以使用select列表中别名的步骤。

* 第十二步：应用top选项。此时才返回结果给请求者即用户。

============================================================

例子：
1. select 列列表 from 表列表名/视图列表名 where 条件.
2. select 列列表 from 表列表名/视图列表名
where 条件 group by (列列表) having 条件
3. select 列列表 from 表列表名/视图列表名
where 条件 group by (列列表) having 条件 order by 列列表
4. select 列列表 from 表1 join 表2 on 表1.列1=表2.列1...join 表n on 表n.列1=表(n-1).列1
where 表1.条件 and 表2.条件...表n.

执行顺序：

1. 先from再where 后select
2. 先from再where 再group 再having 后select
3. 先from再where 再group 再having 再select 后order
4. 先from再join 再where 后select

========================================================================
